const { PrismaClient } = require('@prisma/client')
const fs = require('fs').promises
const path = require('path')
const https = require('https')
const http = require('http')

const prisma = new PrismaClient()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
function downloadImage(url, filepath) {
  return new Promise((resolve, reject) => {
    const file = require('fs').createWriteStream(filepath)
    const protocol = url.startsWith('https') ? https : http
    
    const request = protocol.get(url, (response) => {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
      if (response.statusCode === 301 || response.statusCode === 302) {
        const redirectUrl = response.headers.location
        console.log(`    üìç –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: ${redirectUrl}`)
        file.close()
        require('fs').unlinkSync(filepath)
        return downloadImage(redirectUrl, filepath).then(resolve).catch(reject)
      }
      
      if (response.statusCode !== 200) {
        file.close()
        require('fs').unlinkSync(filepath)
        reject(new Error(`HTTP ${response.statusCode}`))
        return
      }
      
      response.pipe(file)
      file.on('finish', () => {
        file.close()
        resolve()
      })
    }).on('error', (err) => {
      file.close()
      require('fs').unlink(filepath, () => {})
      reject(err)
    })
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Picsum
async function getRandomImageUrl() {
  // Picsum –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  // seed –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞
  const seed = Date.now() + Math.random()
  return `https://picsum.photos/seed/${seed}/1920/400`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∏–∫–Ω–µ–π–º–∞
function getFirstWord(nickname) {
  if (!nickname) return 'abstract'
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
  const words = nickname.split(/[-_\s]+/)
  const firstWord = words[0] || 'abstract'
  
  // –ï—Å–ª–∏ —Å–ª–æ–≤–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
  if (firstWord.length < 3 || /^\d+$/.test(firstWord)) {
    return 'abstract'
  }
  
  return firstWord.toLowerCase()
}

// –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ seed'—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–∏–∫–Ω–µ–π–º–æ–≤
const seedMap = {
  'admin': 'technology',
  'user': 'nature',
  'test': 'space',
  'demo': 'ocean',
  'dev': 'code',
  'mod': 'city',
  'vip': 'luxury',
  'pro': 'business',
  'new': 'sunrise',
  'old': 'vintage',
  'bot': 'robot',
  'ai': 'neural',
  'crypto': 'bitcoin',
  'nft': 'art',
  'web': 'internet',
  'app': 'mobile',
  'game': 'gaming',
  'art': 'painting',
  'music': 'musical',
  'video': 'cinema',
  'photo': 'camera',
  'food': 'cuisine',
  'travel': 'wanderlust',
  'sport': 'fitness',
  'car': 'automotive',
  'dog': 'puppy',
  'cat': 'kitten',
  'love': 'heart',
  'cool': 'ice',
  'hot': 'fire',
  'cold': 'winter',
  'dark': 'night',
  'light': 'day',
  'happy': 'smile',
  'sad': 'rain'
}

async function restoreBackgrounds() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ñ–æ–Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...')
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ñ–æ–Ω–∞
    const usersWithoutBackground = await prisma.user.findMany({
      where: {
        OR: [
          { backgroundImage: null },
          { backgroundImage: '' }
        ]
      },
      select: {
        id: true,
        nickname: true,
        email: true,
        name: true,
        backgroundImage: true
      }
    })
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${usersWithoutBackground.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ñ–æ–Ω–∞`)
    
    if (usersWithoutBackground.length === 0) {
      console.log('‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∏–º–µ—é—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
      return
    }
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–æ–Ω–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const backgroundsDir = process.env.NODE_ENV === 'production' 
      ? '/var/www/fonana/public/backgrounds'
      : path.join(process.cwd(), 'public', 'backgrounds')
    
    try {
      await fs.access(backgroundsDir)
    } catch {
      await fs.mkdir(backgroundsDir, { recursive: true })
      console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤')
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let successCount = 0
    let errorCount = 0
    
    for (const user of usersWithoutBackground) {
      try {
        const displayName = user.nickname || user.name || user.email
        console.log(`\nüë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${displayName}`)
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–∏–∫–Ω–µ–π–º–∞ –∏–ª–∏ –∏–º–µ–Ω–∏
        const firstWord = getFirstWord(user.nickname || user.name || user.email)
        const seed = seedMap[firstWord] || firstWord
        console.log(`  üé® Seed –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${seed}`)
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        const filename = `bg_${user.id}_${Date.now()}.jpg`
        const filepath = path.join(backgroundsDir, filename)
        
        // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Picsum —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º seed
        const imageUrl = `https://picsum.photos/seed/${seed}_${user.id}/1920/400`
        console.log(`  üîó URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageUrl}`)
        
        // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        console.log(`  ‚¨áÔ∏è  –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...`)
        await downloadImage(imageUrl, filepath)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        const stats = await fs.stat(filepath)
        if (stats.size < 1000) {
          throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
        }
        console.log(`  üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(stats.size / 1024).toFixed(1)} KB`)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const backgroundUrl = `/backgrounds/${filename}`
        await prisma.user.update({
          where: { id: user.id },
          data: { backgroundImage: backgroundUrl }
        })
        
        console.log(`  ‚úÖ –§–æ–Ω —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${backgroundUrl}`)
        successCount++
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
        await new Promise(resolve => setTimeout(resolve, 500))
        
      } catch (error) {
        errorCount++
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.nickname || user.name}:`, error.message)
      }
    }
    
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount}`)
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`)
    console.log('\n‚ú® –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
restoreBackgrounds() 