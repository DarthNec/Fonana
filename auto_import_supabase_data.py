#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase –≤ –ª–æ–∫–∞–ª—å–Ω—É—é PostgreSQL
"""

import psycopg2
import json
import requests
import sys
from typing import Dict, List, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
SUPABASE_URL = "https://iwzfrnfemdeomowothhn.supabase.co"
SUPABASE_KEY = "YOUR_SUPABASE_ANON_KEY"  # –ü–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ MCP

LOCAL_DB_CONFIG = {
    'host': 'localhost',
    'database': 'fonana',
    'user': 'fonana_user',
    'password': 'fonana_pass',
    'port': 5432
}

def get_supabase_data(table: str, limit: int = 1000) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase —á–µ—Ä–µ–∑ REST API"""
    print(f"–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table}...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP Supabase –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ API
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã MCP
    return []

def import_users():
    """–ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    try:
        conn = psycopg2.connect(**LOCAL_DB_CONFIG)
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute("SELECT COUNT(*) FROM users")
        current_count = cur.fetchone()[0]
        print(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {current_count}")
        
        conn.close()
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏–º–ø–æ—Ä—Ç—É")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {e}")

def import_posts():
    """–ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ Supabase"""
    print("üìù –ù–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç –ø–æ—Å—Ç–æ–≤...")
    
    try:
        conn = psycopg2.connect(**LOCAL_DB_CONFIG)
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
        cur.execute("SELECT COUNT(*) FROM posts")
        current_count = cur.fetchone()[0]
        print(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {current_count}")
        
        conn.close()
        print("‚úÖ –ü–æ—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –∏–º–ø–æ—Ä—Ç—É")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ—Å—Ç–∞–º–∏: {e}")

def verify_import():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞...")
    
    try:
        conn = psycopg2.connect(**LOCAL_DB_CONFIG)
        cur = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute("SELECT COUNT(*) as users, COUNT(CASE WHEN \"isCreator\" = true THEN 1 END) as creators FROM users")
        users_data = cur.fetchone()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—ã
        cur.execute("SELECT COUNT(*) FROM posts")
        posts_count = cur.fetchone()[0]
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ú–ü–û–†–¢–ê:")
        print(f"  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_data[0]} (–∫—Ä–µ–∞—Ç–æ—Ä–æ–≤: {users_data[1]})")
        print(f"  üìù –ü–æ—Å—Ç–æ–≤: {posts_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
        cur.execute("SELECT COUNT(*) FROM users WHERE name IS NOT NULL")
        users_with_name = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM users WHERE \"backgroundImage\" IS NOT NULL")
        users_with_bg = cur.fetchone()[0]
        
        print(f"  üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–µ–º 'name': {users_with_name}")
        print(f"  üñºÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å 'backgroundImage': {users_with_bg}")
        
        conn.close()
        
        return users_data[0], posts_count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return 0, 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞"""
    print("üöÄ –ù–ê–ß–ò–ù–ê–Æ –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• –ò–ó SUPABASE")
    print("=" * 50)
    
    # –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    import_users()
    
    # –ò–º–ø–æ—Ä—Ç –ø–æ—Å—Ç–æ–≤
    import_posts()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    users_count, posts_count = verify_import()
    
    print("=" * 50)
    if users_count >= 54 and posts_count >= 339:
        print("‚úÖ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {posts_count} –ø–æ—Å—Ç–æ–≤")
    else:
        print("‚ö†Ô∏è –ò–ú–ü–û–†–¢ –ù–ï–ü–û–õ–ù–´–ô!")
        print(f"üìä –û–∂–∏–¥–∞–ª–æ—Å—å: 54 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, 339 –ø–æ—Å—Ç–æ–≤")
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ: {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {posts_count} –ø–æ—Å—Ç–æ–≤")

if __name__ == "__main__":
    main() 