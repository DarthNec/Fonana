'use client'

import { useState, useEffect, useCallback, useRef } from 'react'
import { UnifiedPost, PostAction } from '@/types/posts'
import { PostNormalizer } from '@/services/posts/normalizer'
import { useWallet } from '@solana/wallet-adapter-react'
import { useUser } from '@/lib/store/appStore'
import toast from 'react-hot-toast'
import { checkPostAccess, hasAccessToTier } from '@/lib/utils/access'
import { useStableWallet } from './useStableWallet'

interface UseUnifiedPostsOptions {
  creatorId?: string
  category?: string
  limit?: number
  variant?: 'feed' | 'profile' | 'creator' | 'search' | 'dashboard'
  initialPosts?: any[]
}

interface UseUnifiedPostsReturn {
  posts: UnifiedPost[]
  isLoading: boolean
  error: Error | null
  refresh: () => void
  handleAction: (action: PostAction) => Promise<void>
}

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏
 * [Enhanced Posts System - Unified Interface 2025]
 * 
 * üî• M7 HEAVY ROUTE FIX: Eliminated infinite loop via stable wallet dependencies
 * ROOT CAUSE: publicKey object in fetchPosts useCallback dependencies ‚Üí infinite re-creation
 * SOLUTION: Use useStableWallet() hook with memoized publicKeyString
 */
export function useUnifiedPosts(options: UseUnifiedPostsOptions = {}): UseUnifiedPostsReturn {
  const user = useUser()
  const isUserLoading = false // Zustand –Ω–µ –∏–º–µ–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  const { publicKeyString } = useStableWallet() // üî• M7 FIX: STABLE DEPENDENCY!
  const [posts, setPosts] = useState<UnifiedPost[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [hasMore, setHasMore] = useState(true)
  const [page, setPage] = useState(1)
  const [error, setError] = useState<Error | null>(null)
  const postsRef = useRef<UnifiedPost[]>([])

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º ref —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  useEffect(() => {
    postsRef.current = posts
  }, [posts])

  const fetchPosts = useCallback(async () => {
    try {
      setIsLoading(true)
      setError(null)

      // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const params = new URLSearchParams()
      if (options.creatorId) params.append('creatorId', options.creatorId)
      if (options.category) params.append('category', options.category)
      if (options.limit) params.append('limit', options.limit.toString())
      if (publicKeyString) params.append('userWallet', publicKeyString) // üî• M7 FIX: STABLE STRING
      if (user?.id) params.append('userId', user.id)

      const response = await fetch(`/api/posts?${params}`)
      if (!response.ok) throw new Error('Failed to fetch posts')

      const data = await response.json()
      const rawPosts = data.posts || []

      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
      const normalizedPosts = PostNormalizer.normalizeMany(rawPosts)
      setPosts(normalizedPosts)

    } catch (err) {
      console.error('Error fetching posts:', err)
      setError(err as Error)
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤')
    } finally {
      setIsLoading(false)
    }
  }, [options.creatorId, options.category, options.limit, publicKeyString, user?.id]) // üî• M7 FIX: STABLE STRING!

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    fetchPosts()
  }, [fetchPosts])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ—Å—Ç–∞–º–∏
  const handleAction = useCallback(async (action: PostAction) => {
    const post = postsRef.current.find(p => p.id === action.postId)
    if (!post) return

    try {
      switch (action.type) {
        case 'like':
          await handleLike(action.postId)
          break
        case 'unlike':
          await handleUnlike(action.postId)
          break
        case 'comment':
          // –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ
          console.log('Comment action:', action)
          break
        case 'share':
          await handleShare(action.postId)
          break
        case 'subscribe':
          // –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ
          console.log('Subscribe action:', action)
          break
        case 'purchase':
          // –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ
          console.log('Purchase action:', action)
          break
        case 'edit':
          // –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ
          console.log('Edit action:', action)
          break
        case 'delete':
          await handleDelete(action.postId)
          break
        default:
          console.warn('Unknown action type:', action.type)
      }
    } catch (error) {
      console.error('Action error:', error)
      toast.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è')
    }
  }, [user?.wallet])

  // –õ–∞–π–∫ –ø–æ—Å—Ç–∞
  const handleLike = async (postId: string) => {
    console.log('üéØ [LIKE HOOK] handleLike called for post:', postId)
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ userId
    const userId = await getUserId()
    console.log('üéØ [LIKE HOOK] getUserId result:', userId)
    
    if (!userId) {
      console.log('üéØ [LIKE HOOK] No userId, checking alternatives...')
      if (isUserLoading) {
        console.log('üéØ [LIKE HOOK] User is loading...')
        toast('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...', { icon: '‚è≥' })
      } else if (!publicKeyString) {
        console.log('üéØ [LIKE HOOK] No publicKeyString')
        toast.error('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫')
      } else {
        // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å userId —á–µ—Ä–µ–∑ API
        console.log('üéØ [LIKE HOOK] Trying to fetch user via API...')
        try {
          const response = await fetch(`/api/user?wallet=${publicKeyString}`)
          if (response.ok) {
            const data = await response.json()
            if (data.user?.id) {
              console.log('üéØ [LIKE HOOK] Got user from API:', data.user.id)
              await performLike(postId, data.user.id)
              return
            }
          }
        } catch (error) {
          console.error('Failed to fetch user for like', error)
        }
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É')
      }
      return
    }

    console.log('üéØ [LIKE HOOK] Proceeding with performLike...')
    await performLike(postId, userId)
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∞–π–∫–∞
  const performLike = async (postId: string, userId: string) => {
    console.log('üéØ [LIKE HOOK] performLike called:', { postId, userId })
    
    try {
      console.log('üéØ [LIKE HOOK] Sending request to API...')
      const response = await fetch(`/api/posts/${postId}/like`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId }),
      })

      console.log('üéØ [LIKE HOOK] API response status:', response.status)
      
      if (!response.ok) {
        const errorText = await response.text()
        console.error('üéØ [LIKE HOOK] API error response:', errorText)
        throw new Error(`Failed to like post: ${response.status} ${errorText}`)
      }

      const data = await response.json()
      console.log('üéØ [LIKE HOOK] API response data:', data)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
      setPosts(prevPosts => 
        prevPosts.map(post => 
          post.id === postId 
            ? { 
                ...post, 
                engagement: { 
                  ...post.engagement, 
                  likes: data.likesCount,
                  isLiked: data.isLiked
                }
              }
            : post
        )
      )

      if (data.action === 'liked') {
        toast.success('–ü–æ—Å—Ç –ª–∞–π–∫–Ω—É—Ç!')
      } else {
        toast.success('–õ–∞–π–∫ —É–±—Ä–∞–Ω')
      }
    } catch (error) {
      console.error('Like error:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ')
      
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setPosts(prevPosts => 
        prevPosts.map(post => 
          post.id === postId 
            ? { 
                ...post, 
                engagement: { 
                  ...post.engagement, 
                  likes: post.engagement.likes - 1,
                  isLiked: false
                }
              }
            : post
        )
      )
    }
  }

  // –£–±—Ä–∞—Ç—å –ª–∞–π–∫
  const handleUnlike = async (postId: string) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ userId
    const userId = await getUserId()
    
    if (!userId) {
      if (isUserLoading) {
        toast('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...', { icon: '‚è≥' })
      } else if (!publicKeyString) {
        toast.error('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫')
      } else {
        // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å userId —á–µ—Ä–µ–∑ API
        try {
          const response = await fetch(`/api/user?wallet=${publicKeyString}`)
          if (response.ok) {
            const data = await response.json()
            if (data.user?.id) {
              await performUnlike(postId, data.user.id)
              return
            }
          }
        } catch (error) {
          console.error('Failed to fetch user for unlike', error)
        }
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É')
      }
      return
    }

    await performUnlike(postId, userId)
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ª–∞–π–∫–∞
  const performUnlike = async (postId: string, userId: string) => {
    try {
      const response = await fetch(`/api/posts/${postId}/like`, {
        method: 'POST', // –ò—Å–ø–æ–ª—å–∑—É–µ–º POST –¥–ª—è toggle
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId }),
      })

      if (!response.ok) throw new Error('Failed to unlike post')

      const data = await response.json()
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
      setPosts(prevPosts => 
        prevPosts.map(post => 
          post.id === postId 
            ? { 
                ...post, 
                engagement: { 
                  ...post.engagement, 
                  likes: data.likesCount,
                  isLiked: data.isLiked
                }
              }
            : post
        )
      )

      if (data.action === 'unliked') {
        toast.success('–õ–∞–π–∫ —É–±—Ä–∞–Ω')
      } else {
        toast.success('–ü–æ—Å—Ç –ª–∞–π–∫–Ω—É—Ç!')
      }

    } catch (error) {
      console.error('Unlike error:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ª–∞–π–∫–∞')
      
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setPosts(prevPosts => 
        prevPosts.map(post => 
          post.id === postId 
            ? { 
                ...post, 
                engagement: { 
                  ...post.engagement, 
                  likes: post.engagement.likes + 1,
                  isLiked: true
                }
              }
            : post
        )
      )
    }
  }

  // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ—Å—Ç–æ–º
  const handleShare = async (postId: string) => {
    const post = posts.find(p => p.id === postId)
    if (!post) return

    const shareUrl = `${window.location.origin}/post/${postId}`
    const shareText = `–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç –æ—Ç @${post.creator.username}: ${post.content.title}`

    if (navigator.share) {
      try {
        await navigator.share({
          title: post.content.title,
          text: shareText,
          url: shareUrl,
        })
      } catch (error) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∏–ª–∏ –æ—à–∏–±–∫–∞
        console.log('Share cancelled or error:', error)
      }
    } else {
      // Fallback - –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
      try {
        await navigator.clipboard.writeText(shareUrl)
        toast.success('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!')
      } catch (error) {
        console.error('Copy error:', error)
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É')
      }
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
  const handleDelete = async (postId: string) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç?')) return

    try {
      const response = await fetch(`/api/posts/${postId}`, {
        method: 'DELETE',
      })

      if (!response.ok) throw new Error('Failed to delete post')

      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setPosts(prevPosts => prevPosts.filter(post => post.id !== postId))
      toast.success('–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω')

    } catch (error) {
      console.error('Delete error:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞')
    }
  }

  // getUserId function that tries context first, then API
  const getUserId = useCallback(async (): Promise<string | null> => {
    console.log('üéØ [getUserId] Called with:', { 
      hasUser: !!user, 
      userId: user?.id, 
      isUserLoading, 
      hasPublicKey: !!publicKeyString 
    })
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º user –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if (user?.id) {
      console.log('üéØ [getUserId] Returning user.id from context:', user.id)
      return user.id
    }
    
    // –ï—Å–ª–∏ user –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏ –µ—Å—Ç—å –∫–æ—à–µ–ª–µ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    if (isUserLoading && publicKeyString) {
      console.log('üéØ [getUserId] Checking localStorage...')
      try {
        const savedData = localStorage.getItem('fonana_user_data')
        const savedWallet = localStorage.getItem('fonana_user_wallet')
        
        console.log('üéØ [getUserId] localStorage data:', { 
          hasSavedData: !!savedData, 
          savedWallet, 
          currentWallet: publicKeyString 
        })
        
        if (savedData && savedWallet === publicKeyString) {
          const userData = JSON.parse(savedData)
          if (userData.id) {
            console.log('üéØ [getUserId] Returning user.id from localStorage:', userData.id)
            return userData.id
          }
        }
      } catch (e) {
        console.error('[getUserId] Failed to parse saved user data', e)
      }
    }
    
    console.log('üéØ [getUserId] No userId found, returning null')
    return null
  }, [user, isUserLoading, publicKeyString]) // üî• M7 FIX: STABLE publicKeyString

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  const handleSubscriptionUpdate = useCallback((event: CustomEvent) => {
    const { creatorId: updatedCreatorId } = event.detail
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç—ã —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    setPosts(prevPosts => prevPosts.map(post => {
      if (post.creator.id === updatedCreatorId) {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞
        return {
          ...post,
          access: {
            ...post.access,
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø
            needsRefresh: true
          }
        }
      }
      return post
    }))
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    setTimeout(() => {
      fetchPosts()
    }, 500)
  }, [fetchPosts])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ–∫—É–ø–∫–∏ –ø–æ—Å—Ç–∞
  const handlePostPurchase = useCallback((event: CustomEvent) => {
    const { postId } = event.detail
    
    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç
    setPosts(prevPosts => prevPosts.map(post => {
      if (post.id === postId) {
        return {
          ...post,
          access: {
            ...post.access,
            isLocked: false,
            hasPurchased: true
          }
        }
      }
      return post
    }))
  }, [])

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  useEffect(() => {
    const handleSubscriptionUpdateWrapper = (e: Event) => handleSubscriptionUpdate(e as CustomEvent)
    const handlePostPurchaseWrapper = (e: Event) => handlePostPurchase(e as CustomEvent)
    
    window.addEventListener('subscription-updated', handleSubscriptionUpdateWrapper)
    window.addEventListener('post-purchased', handlePostPurchaseWrapper)
    
    return () => {
      window.removeEventListener('subscription-updated', handleSubscriptionUpdateWrapper)
      window.removeEventListener('post-purchased', handlePostPurchaseWrapper)
    }
  }, [handleSubscriptionUpdate, handlePostPurchase])

  return {
    posts,
    isLoading,
    error,
    refresh: fetchPosts,
    handleAction
  }
} 