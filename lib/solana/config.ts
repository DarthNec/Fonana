import { Connection, clusterApiUrl } from '@solana/web3.js';

// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const network = process.env.NEXT_PUBLIC_SOLANA_NETWORK || 'devnet';
const customRpcUrl = process.env.NEXT_PUBLIC_SOLANA_RPC_URL || process.env.NEXT_PUBLIC_SOLANA_RPC_HOST;

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º RPC URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function getSolanaRpcUrl(): string {
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π RPC URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (customRpcUrl) {
    console.log('[Solana Config] Using custom RPC URL:', customRpcUrl);
    return customRpcUrl;
  }
  
  // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ endpoints Solana
  if (network === 'mainnet-beta') {
    const url = clusterApiUrl('mainnet-beta');
    console.log('[Solana Config] Using mainnet-beta RPC:', url);
    return url;
  } else if (network === 'testnet') {
    const url = clusterApiUrl('testnet');
    console.log('[Solana Config] Using testnet RPC:', url);
    return url;
  } else {
    // devnet –∏–ª–∏ fallback
    const url = clusterApiUrl('devnet');
    console.log('[Solana Config] Using devnet RPC:', url);
    return url;
  }
}

// –°–æ–∑–¥–∞–µ–º connection —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º RPC URL
const rpcUrl = getSolanaRpcUrl();
console.log('[Solana Config] Network:', network);
console.log('[Solana Config] Final RPC URL:', rpcUrl);

export const connection = new Connection(rpcUrl, 'confirmed');

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
export const PLATFORM_WALLET = process.env.NEXT_PUBLIC_PLATFORM_WALLET || 'EEqsmopVfTuaiJrh8xL7ZsZbUctckY6S5WyHYR66wjpw';

console.log('[Solana Config] Platform wallet:', PLATFORM_WALLET);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
export const SOLANA_NETWORK = network;
export const RPC_URL = rpcUrl;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Solana –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

export const SOLANA_CONFIG = {
  // Network configuration
  NETWORK: process.env.NEXT_PUBLIC_SOLANA_NETWORK || 'mainnet-beta',
  RPC_HOST: process.env.NEXT_PUBLIC_SOLANA_RPC_HOST || 
    'https://tame-smart-panorama.solana-mainnet.quiknode.pro/0e70fc875702b126bf8b93cdcd626680e9c48894/',
  WS_ENDPOINT: process.env.NEXT_PUBLIC_SOLANA_WS_ENDPOINT ||
    'wss://tame-smart-panorama.solana-mainnet.quiknode.pro/0e70fc875702b126bf8b93cdcd626680e9c48894/',
  
  // Platform configuration
  PLATFORM_WALLET: process.env.NEXT_PUBLIC_PLATFORM_WALLET || 'EEqsmopVfTuaiJrh8xL7ZsZbUctckY6S5WyHYR66wjpw',
  
  // –¢–∞–π–º–∞—É—Ç—ã
  CONFIRMATION_TIMEOUT: 30000, // 30 —Å–µ–∫—É–Ω–¥
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã
  MIN_PAYMENT_AMOUNT: 0.001, // 0.001 SOL –º–∏–Ω–∏–º—É–º
  MIN_REFERRAL_WITHDRAWAL: 0.1, // 0.1 SOL –º–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
export function validateSolanaConfig() {
  const warnings: string[] = []
  
  if (!process.env.NEXT_PUBLIC_PLATFORM_WALLET) {
    warnings.push('NEXT_PUBLIC_PLATFORM_WALLET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ—à–µ–ª–µ–∫')
  }
  
  if (!process.env.NEXT_PUBLIC_SOLANA_RPC_HOST) {
    warnings.push('NEXT_PUBLIC_SOLANA_RPC_HOST –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π QuickNode RPC')
  }
  
  if (warnings.length > 0) {
    console.warn('‚ö†Ô∏è  Solana Config Warnings:')
    warnings.forEach(w => console.warn(`   - ${w}`))
  }
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–º–∞—Å–∫–∏—Ä—É—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
  console.info('üì° Solana Configuration:')
  console.info(`   RPC: ${SOLANA_CONFIG.RPC_HOST.substring(0, 30)}...`)
  console.info(`   Platform Wallet: ${SOLANA_CONFIG.PLATFORM_WALLET.substring(0, 8)}...`)
  console.info(`   Network: ${SOLANA_CONFIG.NETWORK}`)
  
  return warnings
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è Solana –∞–¥—Ä–µ—Å–∞
export function isValidSolanaAddress(address: string | null | undefined): boolean {
  if (!address) return false
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (32 –±–∞–π—Ç–∞ –≤ base58 = 44 —Å–∏–º–≤–æ–ª–∞)
    if (address.length < 32 || address.length > 44) return false
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª—ã base58
    const base58Regex = /^[1-9A-HJ-NP-Za-km-z]+$/
    return base58Regex.test(address)
  } catch {
    return false
  }
} 