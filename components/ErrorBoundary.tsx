/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π Error Boundary –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ React
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç graceful degradation –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

'use client'

import React from 'react'

interface Props {
  children: React.ReactNode
  fallback?: React.ComponentType<{ error: Error }>
}

interface State {
  hasError: boolean
  error: Error | null
}

export class ErrorBoundary extends React.Component<Props, State> {
  constructor(props: Props) {
    super(props)
    this.state = { hasError: false, error: null }
  }

  static getDerivedStateFromError(error: Error): State {
    // üî• REACT ERROR #185 SPECIAL HANDLING - Don't break UI 
    if (error.message && error.message.includes('Minified React error #185')) {
      console.log('[ErrorBoundary] React Error #185 detected - attempting silent recovery')
      return { hasError: false, error: null } // Don't trigger error state
    }
    
    return { hasError: true, error }
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo)
    
    // üî• REACT ERROR #185 SPECIAL HANDLING
    if (error.message && error.message.includes('Minified React error #185')) {
      console.log('[ErrorBoundary] React Error #185 - logging for debugging but not breaking UX')
      
      // Log detailed info for debugging
      console.error('[ErrorBoundary] React Error #185 Stack:', {
        error: error.message,
        componentStack: errorInfo.componentStack,
        timestamp: new Date().toISOString()
      })
      
      // Silent recovery after 50ms
      setTimeout(() => {
        this.setState({ hasError: false, error: null })
      }, 50)
      
      return // Don't proceed with normal error handling
    }
  }

  render() {
    if (this.state.hasError) {
      const Fallback = this.props.fallback
      if (Fallback) {
        return <Fallback error={this.state.error!} />
      }
      
      return (
        <div className="min-h-screen flex items-center justify-center">
          <div className="text-center p-8">
            <h2 className="text-xl font-semibold mb-2">Something went wrong</h2>
            <p className="text-gray-600 mb-4">Please refresh the page to try again</p>
            <button 
              onClick={() => window.location.reload()}
              className="px-4 py-2 bg-purple-600 text-white rounded-lg"
            >
              Refresh Page
            </button>
          </div>
        </div>
      )
    }

    return this.props.children
  }
}

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Error Boundary –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const useErrorHandler = () => {
  const handleError = (error: Error, context?: string) => {
    console.error(`[${context || 'Component'}] Error:`, error)
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    // sendErrorToAnalytics({ error, context, timestamp: new Date().toISOString() })
  }

  return { handleError }
}

export default ErrorBoundary 