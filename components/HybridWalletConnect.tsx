'use client'

import { useWallet } from '@solana/wallet-adapter-react'
import { WalletMultiButton } from '@solana/wallet-adapter-react-ui'
import { useEffect, useState, useCallback } from 'react'
import { generateSignMessage, detectWalletEnvironment } from '@/lib/auth/solana'
import toast from 'react-hot-toast'
import { useUser } from '@/lib/hooks/useUser'
import { WalletIcon, CheckCircleIcon, XCircleIcon } from '@heroicons/react/24/outline'
import bs58 from 'bs58'

export function HybridWalletConnect() {
  const { connected, connect, disconnect, wallet, publicKey, signMessage } = useWallet()
  const { user, refreshUser } = useUser()
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [isAuthenticating, setIsAuthenticating] = useState(false)
  const [showUXHint, setShowUXHint] = useState(false)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    checkAuthStatus()
  }, [])

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  useEffect(() => {
    const env = detectWalletEnvironment()
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –µ—Å–ª–∏ –≤ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
    if (env.isInWalletBrowser && !env.isMobile) {
      setShowUXHint(true)
      setTimeout(() => setShowUXHint(false), 10000) // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    }
  }, [])

  const checkAuthStatus = async () => {
    try {
      const response = await fetch('/api/auth/wallet')
      const data = await response.json()
      
      if (data.authenticated) {
        setIsAuthenticated(true)
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å JWT –Ω–æ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (!connected && publicKey?.toString() !== data.user.wallet) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
          // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –ø–æ–¥–∫–ª—é—á–∏–º –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
        }
      }
    } catch (error) {
      console.error('Auth check failed:', error)
    }
  }

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–æ–¥–ø–∏—Å—å –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
  const authenticateWithSignature = async () => {
    if (!publicKey || !signMessage) {
      toast.error('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    setIsAuthenticating(true)
    const loadingToast = toast.loading('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å...')

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
      const message = generateSignMessage()
      const messageBytes = new TextEncoder().encode(message)
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å
      const signature = await signMessage(messageBytes)
      const signatureBase58 = bs58.encode(signature)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const response = await fetch('/api/auth/wallet', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message,
          signature: signatureBase58,
          publicKey: publicKey.toString()
        })
      })

      const data = await response.json()

      if (response.ok && data.success) {
        setIsAuthenticated(true)
        toast.success('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', { id: loadingToast })
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage –∫–∞–∫ fallback
        if (data.token) {
          localStorage.setItem('fonana-jwt', data.token)
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await refreshUser()
      } else {
        toast.error(data.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', { id: loadingToast })
      }
    } catch (error: any) {
      console.error('Authentication error:', error)
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', { id: loadingToast })
    } finally {
      setIsAuthenticating(false)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
  useEffect(() => {
    if (connected && publicKey && !isAuthenticated && !isAuthenticating) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      authenticateWithSignature()
    }
  }, [connected, publicKey])

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  const handleLogout = async () => {
    try {
      await fetch('/api/auth/wallet', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'logout' })
      })
      
      localStorage.removeItem('fonana-jwt')
      setIsAuthenticated(false)
      disconnect()
      toast.success('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
    } catch (error) {
      console.error('Logout error:', error)
    }
  }

  // –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (isAuthenticated && user) {
    return (
      <div className="flex items-center gap-4">
        <div className="flex items-center gap-2 px-4 py-2 bg-green-500/10 dark:bg-green-500/20 text-green-600 dark:text-green-400 rounded-xl">
          <CheckCircleIcon className="w-5 h-5" />
          <span className="font-medium">–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</span>
        </div>
        
        {connected ? (
          <button
            onClick={handleLogout}
            className="px-4 py-2 bg-red-500/10 hover:bg-red-500/20 text-red-600 dark:text-red-400 rounded-xl font-medium transition-all duration-200"
          >
            –í—ã–π—Ç–∏
          </button>
        ) : (
          <button
            onClick={() => connect()}
            className="flex items-center gap-2 px-4 py-2 bg-purple-500/10 hover:bg-purple-500/20 text-purple-600 dark:text-purple-400 rounded-xl font-medium transition-all duration-200"
          >
            <WalletIcon className="w-5 h-5" />
            –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
          </button>
        )}
      </div>
    )
  }

  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
  return (
    <div className="relative">
      <WalletMultiButton className="!bg-purple-600 hover:!bg-purple-700" />
      
      {/* UX –ø–æ–¥—Å–∫–∞–∑–∫–∞ */}
      {showUXHint && (
        <div className="absolute top-full mt-2 right-0 w-72 p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-xl shadow-lg">
          <p className="text-sm text-yellow-800 dark:text-yellow-200">
            üí° –î–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
          </p>
          <button
            onClick={() => setShowUXHint(false)}
            className="absolute top-2 right-2 text-yellow-600 hover:text-yellow-800"
          >
            <XCircleIcon className="w-4 h-4" />
          </button>
        </div>
      )}
    </div>
  )
} 