generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String?        @unique
  emailVerified  DateTime?      @map("email_verified")
  name           String?
  image          String?
  nickname       String?        @unique
  fullName       String?
  bio            String?
  avatar         String?
  backgroundImage String?
  website        String?
  twitter        String?
  telegram       String?
  location       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  isVerified     Boolean        @default(false)
  isCreator      Boolean        @default(false)
  followersCount Int            @default(0)
  followingCount Int            @default(0)
  postsCount     Int            @default(0)
  
  // Wallet fields
  wallet         String?        @unique
  solanaWallet   String?        @unique @map("solana_wallet")
  
  // Relations
  comments       Comment[]
  follows        Follow[]       @relation("UserFollows")
  followers      Follow[]       @relation("UserFollowers")
  likes          Like[]
  posts          Post[]
  subscriptions  Subscription[]  @relation("UserSubscriptions")
  subscribers    Subscription[]  @relation("CreatorSubscriptions")
  postPurchases  PostPurchase[]

  // Referral system
  referrerId     String?
  referrer       User?          @relation("Referrals", fields: [referrerId], references: [id])
  referrals      User[]         @relation("Referrals")

  // NextAuth
  accounts       Account[]
  sessions       Session[]
  
  // Settings
  settings       UserSettings?
  tierSettings   CreatorTierSettings?

  @@map("users")
}

model Post {
  id            String    @id @default(cuid())
  creatorId     String
  title         String
  content       String
  type          String
  category      String?
  thumbnail     String?
  mediaUrl      String?
  isLocked      Boolean   @default(false)
  isPremium     Boolean   @default(false)
  price         Float?
  currency      String    @default("SOL")
  minSubscriptionTier String?
  likesCount    Int       @default(0)
  commentsCount Int       @default(0)
  viewsCount    Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  comments      Comment[]
  likes         Like[]
  tags          PostTag[]
  creator       User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  purchases     PostPurchase[]

  @@map("posts")
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  posts PostTag[]

  @@map("tags")
}

model PostTag {
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id          String    @id @default(cuid())
  postId      String
  userId      String
  content     String
  isAnonymous Boolean   @default(false)
  likesCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  parentId    String?
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime @default(now())
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("likes")
}

model Subscription {
  id           String   @id @default(cuid())
  userId       String
  creatorId    String
  plan         String
  price        Float
  currency     String   @default("SOL")
  subscribedAt DateTime @default(now())
  validUntil   DateTime
  isActive     Boolean  @default(true)
  txSignature  String?
  
  // Payment details
  paymentStatus    PaymentStatus @default(PENDING)
  paymentAmount    Float?
  platformFee      Float?
  referrerFee      Float?
  creatorAmount    Float?
  
  // Relations
  user         User     @relation("UserSubscriptions", fields: [userId], references: [id], onDelete: Cascade)
  creator      User     @relation("CreatorSubscriptions", fields: [creatorId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([userId, creatorId])
  @@map("subscriptions")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

// Transaction tracking model
model Transaction {
  id              String   @id @default(cuid())
  subscriptionId  String?
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])
  postPurchaseId  String?  @unique
  postPurchase    PostPurchase? @relation(fields: [postPurchaseId], references: [id])
  
  // Transaction details
  txSignature     String   @unique
  fromWallet      String
  toWallet        String
  amount          Float
  currency        String   @default("SOL")
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  
  // Fee distribution
  platformFee     Float?
  referrerFee     Float?
  referrerWallet  String?
  
  // Metadata
  metadata        Json?
  errorMessage    String?
  confirmedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("transactions")
}

// Payment status enum
enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

// Transaction type enum
enum TransactionType {
  SUBSCRIPTION
  POST_PURCHASE
  PLATFORM_FEE
  REFERRER_FEE
  WITHDRAWAL
  REFUND
}

// Transaction status enum
enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
  EXPIRED
}

// NextAuth models
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// New model for tracking post purchases
model PostPurchase {
  id            String    @id @default(cuid())
  postId        String
  userId        String
  price         Float
  currency      String    @default("SOL")
  txSignature   String?
  purchasedAt   DateTime  @default(now())
  
  // Payment details
  paymentStatus PaymentStatus @default(PENDING)
  platformFee   Float?
  referrerFee   Float?
  creatorAmount Float?
  
  // Relations
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction   Transaction?
  
  @@unique([userId, postId])
  @@map("post_purchases")
}

// User settings model
model UserSettings {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  
  // Notification settings
  notifyComments         Boolean  @default(true)
  notifyLikes            Boolean  @default(true)
  notifyNewPosts         Boolean  @default(true)
  notifySubscriptions    Boolean  @default(true)
  
  // Privacy settings
  showActivity           Boolean  @default(true)
  allowMessages          Boolean  @default(true)
  showOnlineStatus       Boolean  @default(true)
  
  // Theme
  theme                  String   @default("dark")
  
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  // Relations
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_settings")
}

// Creator tier settings model
model CreatorTierSettings {
  id            String   @id @default(cuid())
  creatorId     String   @unique
  
  // Tier settings stored as JSON
  basicTier     Json?    // { enabled: boolean, price: number, description: string, features: [] }
  premiumTier   Json?    // { enabled: boolean, price: number, description: string, features: [] }
  vipTier       Json?    // { enabled: boolean, price: number, description: string, features: [] }
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  creator       User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  @@map("creator_tier_settings")
}
