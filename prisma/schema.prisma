generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  wallet               String                @unique
  nickname             String?               @unique
  fullName             String?
  bio                  String?
  avatar               String?
  website              String?
  twitter              String?
  telegram             String?
  location             String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  isVerified           Boolean               @default(false)
  isCreator            Boolean               @default(false)
  followersCount       Int                   @default(0)
  followingCount       Int                   @default(0)
  postsCount           Int                   @default(0)
  accounts             Account[]
  auctionBids          AuctionBid[]
  auctionDeposits      AuctionDeposit[]
  auctionPayments      AuctionPayment[]
  comments             Comment[]
  flashSaleRedemptions FlashSaleRedemption[]
  follows              Follow[]              @relation("UserFollows")
  followers            Follow[]              @relation("UserFollowers")
  likes                Like[]
  posts                Post[]
  sessions             Session[]
  subscribers          Subscription[]        @relation("CreatorSubscriptions")
  subscriptions        Subscription[]        @relation("UserSubscriptions")
  settings             UserSettings?

  @@map("users")
}

model Post {
  id              String           @id @default(cuid())
  creatorId       String
  title           String
  content         String
  type            String
  category        String?
  thumbnail       String?
  mediaUrl        String?
  isLocked        Boolean          @default(false)
  isPremium       Boolean          @default(false)
  price           Float?
  currency        String           @default("SOL")
  likesCount      Int              @default(0)
  commentsCount   Int              @default(0)
  viewsCount      Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  auctionBids     AuctionBid[]
  auctionDeposits AuctionDeposit[]
  auctionPayment  AuctionPayment?
  comments        Comment[]
  flashSales      FlashSale[]
  likes           Like[]
  tags            PostTag[]
  creator         User             @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  posts PostTag[]

  @@map("tags")
}

model PostTag {
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id          String    @id @default(cuid())
  postId      String
  userId      String
  content     String
  isAnonymous Boolean   @default(false)
  likesCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  parentId    String?
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime @default(now())
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("likes")
}

model Subscription {
  id           String        @id @default(cuid())
  userId       String
  creatorId    String
  plan         String
  price        Float
  currency     String        @default("SOL")
  subscribedAt DateTime      @default(now())
  validUntil   DateTime
  isActive     Boolean       @default(true)
  txSignature  String?
  creator      User          @relation("CreatorSubscriptions", fields: [creatorId], references: [id], onDelete: Cascade)
  user         User          @relation("UserSubscriptions", fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([userId, creatorId])
  @@map("subscriptions")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Transaction {
  id             String            @id @default(cuid())
  subscriptionId String?
  txSignature    String            @unique
  fromWallet     String
  toWallet       String
  amount         Float
  currency       String            @default("SOL")
  type           TransactionType
  status         TransactionStatus @default(PENDING)
  platformFee    Float?
  referrerFee    Float?
  referrerWallet String?
  metadata       Json?
  errorMessage   String?
  confirmedAt    DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  postPurchaseId String?           @unique
  receiverId     String?
  senderId       String?
  postPurchase   PostPurchase?     @relation(fields: [postPurchaseId], references: [id])
  subscription   Subscription?     @relation(fields: [subscriptionId], references: [id])

  @@map("transactions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model PostPurchase {
  id            String        @id @default(cuid())
  postId        String
  userId        String
  price         Float
  currency      String        @default("SOL")
  txSignature   String?
  purchasedAt   DateTime      @default(now())
  paymentStatus PaymentStatus @default(PENDING)
  platformFee   Float?
  referrerFee   Float?
  creatorAmount Float?
  transaction   Transaction?

  @@unique([userId, postId])
  @@map("post_purchases")
}

model UserSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  notifyComments      Boolean  @default(true)
  notifyLikes         Boolean  @default(true)
  notifyNewPosts      Boolean  @default(true)
  notifySubscriptions Boolean  @default(true)
  showActivity        Boolean  @default(true)
  allowMessages       Boolean  @default(true)
  showOnlineStatus    Boolean  @default(true)
  theme               String   @default("dark")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model CreatorTierSettings {
  id          String   @id @default(cuid())
  creatorId   String   @unique
  basicTier   Json?
  premiumTier Json?
  vipTier     Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("creator_tier_settings")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  metadata  Json?
  createdAt DateTime         @default(now())

  @@index([userId, isRead])
  @@map("notifications")
}

model AuctionDeposit {
  id                String        @id @default(cuid())
  postId            String
  userId            String
  amount            Float
  txSignature       String
  status            DepositStatus @default(HELD)
  createdAt         DateTime      @default(now())
  refundedAt        DateTime?
  refundTxSignature String?
  forfeitedAt       DateTime?
  post              Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user              User          @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
  @@index([userId, status])
  @@map("auction_deposits")
}

model AuctionBid {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  amount    Float
  isWinning Boolean  @default(false)
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([postId, amount])
  @@index([userId])
  @@map("auction_bids")
}

model AuctionPayment {
  id                String               @id @default(cuid())
  postId            String               @unique
  userId            String
  amount            Float
  txSignature       String?
  status            AuctionPaymentStatus @default(PENDING)
  dueAt             DateTime
  paidAt            DateTime?
  sellerConfirmedAt DateTime?
  createdAt         DateTime             @default(now())
  post              Post                 @relation(fields: [postId], references: [id])
  user              User                 @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@map("auction_payments")
}

model FlashSale {
  id               String                @id @default(cuid())
  creatorId        String?
  postId           String?
  subscriptionPlan String?
  discount         Float
  maxRedemptions   Int?
  usedCount        Int                   @default(0)
  startAt          DateTime              @default(now())
  endAt            DateTime
  isActive         Boolean               @default(true)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  redemptions      FlashSaleRedemption[]
  post             Post?                 @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([creatorId, isActive])
  @@index([endAt, isActive])
  @@map("flash_sales")
}

model FlashSaleRedemption {
  id             String    @id @default(cuid())
  flashSaleId    String
  userId         String
  originalPrice  Float
  discountAmount Float
  finalPrice     Float
  redeemedAt     DateTime  @default(now())
  flashSale      FlashSale @relation(fields: [flashSaleId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([flashSaleId, userId])
  @@map("flash_sale_redemptions")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Conversation {
  id            String    @default(cuid())
  lastMessageAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@ignore
}

model Message {
  id             String            @id @default(cuid())
  conversationId String
  senderId       String
  content        String?
  mediaUrl       String?
  mediaType      String?
  isPaid         Boolean           @default(false)
  price          Float?
  isRead         Boolean           @default(false)
  createdAt      DateTime          @default(now())
  metadata       Json?
  purchases      MessagePurchase[]

  @@index([conversationId])
  @@index([senderId])
}

model MessagePurchase {
  id          String   @id @default(cuid())
  messageId   String
  userId      String
  amount      Float
  txSignature String
  createdAt   DateTime @default(now())
  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([userId])
}

model UserConversations {
  A String
  B String

  @@id([A, B], map: "_UserConversations_AB_pkey")
  @@index([B], map: "_UserConversations_B_index")
  @@map("_UserConversations")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum TransactionType {
  SUBSCRIPTION
  PLATFORM_FEE
  REFERRER_FEE
  WITHDRAWAL
  REFUND
  POST_PURCHASE
  MESSAGE_PURCHASE
  TIP
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
  EXPIRED
}

enum NotificationType {
  LIKE_POST
  LIKE_COMMENT
  COMMENT_POST
  REPLY_COMMENT
  NEW_SUBSCRIBER
  POST_PURCHASE
  NEW_POST_FROM_SUBSCRIPTION
  AUCTION_NEW_BID
  AUCTION_WON
  AUCTION_PAYMENT_REMINDER
  AUCTION_DEPOSIT_REFUNDED
  TIP_RECEIVED
  NEW_MESSAGE
}

enum SellType {
  FIXED_PRICE
  AUCTION
}

enum AuctionStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  ENDED
  SOLD
  CANCELLED
  EXPIRED
}

enum DepositStatus {
  HELD
  REFUNDED
  FORFEITED
}

enum AuctionPaymentStatus {
  PENDING
  PAID
  CONFIRMED
  EXPIRED
  CANCELLED
}
