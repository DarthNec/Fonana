generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  wallet         String         @unique
  nickname       String?
  fullName       String?
  bio            String?
  avatar         String?
  backgroundImage String?
  website        String?
  twitter        String?
  telegram       String?
  location       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  isVerified     Boolean        @default(false)
  isCreator      Boolean        @default(false)
  followersCount Int            @default(0)
  followingCount Int            @default(0)
  postsCount     Int            @default(0)
  comments       Comment[]
  follows        Follow[]       @relation("UserFollows")
  followers      Follow[]       @relation("UserFollowers")
  likes          Like[]
  posts          Post[]
  subscriptions  Subscription[]  @relation("UserSubscriptions")
  subscribers    Subscription[]  @relation("CreatorSubscriptions")

  @@map("users")
}

model Post {
  id            String    @id @default(cuid())
  creatorId     String
  title         String
  content       String
  type          String
  category      String?
  thumbnail     String?
  mediaUrl      String?
  isLocked      Boolean   @default(false)
  isPremium     Boolean   @default(false)
  price         Float?
  currency      String    @default("SOL")
  likesCount    Int       @default(0)
  commentsCount Int       @default(0)
  viewsCount    Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  comments      Comment[]
  likes         Like[]
  tags          PostTag[]
  creator       User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  posts PostTag[]

  @@map("tags")
}

model PostTag {
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id          String    @id @default(cuid())
  postId      String
  userId      String
  content     String
  isAnonymous Boolean   @default(false)
  likesCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  parentId    String?
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime @default(now())
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("likes")
}

model Subscription {
  id           String   @id @default(cuid())
  userId       String
  creatorId    String
  plan         String
  price        Float
  currency     String   @default("SOL")
  subscribedAt DateTime @default(now())
  validUntil   DateTime
  isActive     Boolean  @default(true)
  txSignature  String?
  user         User     @relation("UserSubscriptions", fields: [userId], references: [id], onDelete: Cascade)
  creator      User     @relation("CreatorSubscriptions", fields: [creatorId], references: [id], onDelete: Cascade)

  @@unique([userId, creatorId])
  @@map("subscriptions")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}
