require('dotenv').config();
const { createWebSocketServer } = require('./src/server');
const { initPrisma } = require('./src/db');
const { initRedis } = require('./src/redis');
const { initLogs, startStatsReporter, createMetricsEndpoint } = require('./src/monitoring');

const PORT = process.env.WS_PORT || 3002;

async function startServer() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    await initLogs();
    console.log('‚úÖ Logging initialized');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Prisma
    await initPrisma();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis
    const redisConnected = initRedis();
    
    if (redisConnected) {
      console.log('‚úÖ Redis initialized successfully');
    } else {
      console.log('‚ö†Ô∏è  Running in single server mode without Redis');
    }
    
    // –°–æ–∑–¥–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
    const wss = createWebSocketServer(PORT);
    
    console.log(`‚úÖ WebSocket server started on port ${PORT}`);
    console.log('üì° Waiting for connections...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    startStatsReporter(60000); // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    // –°–æ–∑–¥–∞–µ–º HTTP endpoint –¥–ª—è –º–µ—Ç—Ä–∏–∫
    createMetricsEndpoint();
    
    // Graceful shutdown
    process.on('SIGTERM', () => {
      console.log('SIGTERM received, shutting down gracefully');
      wss.close(() => {
        console.log('WebSocket server closed');
        process.exit(0);
      });
    });
    
  } catch (error) {
    console.error('‚ùå Failed to start server:', error);
    process.exit(1);
  }
}

startServer(); 