const jwt = require('jsonwebtoken');
const { getPrisma } = require('./db');

const JWT_SECRET = process.env.NEXTAUTH_SECRET || 'your-secret-key';

// Debug logging
console.log('üîë JWT_SECRET configured:', JWT_SECRET ? `${JWT_SECRET.substring(0, 10)}...` : 'NOT SET');
console.log('üîë Using default key:', JWT_SECRET === 'your-secret-key');

async function verifyToken(token) {
  try {
    console.log('üîê Verifying token...');
    console.log('üîë Token length:', token ? token.length : 0);
    
    // DEBUG: –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã —Ç–æ–∫–µ–Ω–∞
    if (token) {
      console.log('üîë Token preview:', `${token.substring(0, 50)}...${token.substring(token.length - 50)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–æ–∫–µ–Ω –≤ URL
      const decodedToken = decodeURIComponent(token);
      if (decodedToken !== token) {
        console.log('üîë Token was URL encoded, decoded length:', decodedToken.length);
        token = decodedToken;
      }
    }
    
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –±–µ–∑ —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ issuer/audience
    const decoded = jwt.verify(token, JWT_SECRET);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
    if (!decoded) {
      console.log('‚ö†Ô∏è  Token decoded to null/undefined');
      return null;
    }
    
    console.log('üìã Decoded token:', {
      userId: decoded.userId,
      sub: decoded.sub,
      iss: decoded.iss,
      aud: decoded.aud,
      exp: decoded.exp ? new Date(decoded.exp * 1000).toISOString() : 'no exp'
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ userId –≤ —Ç–æ–∫–µ–Ω–µ
    if (!decoded.userId && !decoded.sub) {
      console.log('‚ö†Ô∏è  No userId in token');
      return null;
    }
    
    const userId = decoded.userId || decoded.sub;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π prisma
    let prisma;
    try {
      prisma = getPrisma();
    } catch (error) {
      console.error('‚ùå Prisma not initialized:', error.message);
      return null;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: {
        id: true,
        email: true,
        nickname: true,
        name: true,
        wallet: true,
        isCreator: true,
        isVerified: true
      }
    });
    
    if (!user) {
      console.log(`‚ö†Ô∏è  User ${userId} not found in database`);
      return null;
    }
    
    console.log(`‚úÖ Token verified for user ${user.nickname || user.id}`);
    return user;
    
  } catch (error) {
    if (error.name === 'TokenExpiredError') {
      console.log('‚ö†Ô∏è  Token expired at', error.expiredAt);
    } else if (error.name === 'JsonWebTokenError') {
      console.log('‚ö†Ô∏è  Invalid token:', error.message);
    } else {
      console.error('‚ùå Token verification error:', error);
    }
    return null;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function createToken(userId, expiresIn = '30m') {
  return jwt.sign(
    { 
      userId, 
      sub: userId 
    },
    JWT_SECRET,
    { 
      expiresIn,
      issuer: 'fonana.me',
      audience: 'fonana-websocket'
    }
  );
}

module.exports = {
  verifyToken,
  createToken
}; 