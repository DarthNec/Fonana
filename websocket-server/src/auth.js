const jwt = require('jsonwebtoken');
const { prisma } = require('./db');

const JWT_SECRET = process.env.NEXTAUTH_SECRET || 'your-secret-key';

async function verifyToken(token) {
  try {
    console.log('üîç Verifying token...');
    console.log('JWT_SECRET:', JWT_SECRET ? 'SET' : 'NOT SET');
    
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const decoded = jwt.verify(token, JWT_SECRET, {
      issuer: 'fonana.me',
      audience: 'fonana-websocket'
    });
    
    console.log('‚úÖ Token decoded:', { userId: decoded.userId, sub: decoded.sub });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ userId –≤ —Ç–æ–∫–µ–Ω–µ
    if (!decoded.userId && !decoded.sub) {
      console.log('‚ö†Ô∏è  No userId in token');
      return null;
    }
    
    const userId = decoded.userId || decoded.sub;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: {
        id: true,
        email: true,
        nickname: true,
        name: true,
        wallet: true,
        isCreator: true,
        isVerified: true
      }
    });
    
    if (!user) {
      console.log(`‚ö†Ô∏è  User ${userId} not found in database`);
      return null;
    }
    
    console.log(`‚úÖ Token verified for user ${user.nickname || user.id}`);
    return user;
    
  } catch (error) {
    if (error.name === 'TokenExpiredError') {
      console.log('‚ö†Ô∏è  Token expired at', error.expiredAt);
    } else if (error.name === 'JsonWebTokenError') {
      console.log('‚ö†Ô∏è  Invalid token:', error.message);
    } else {
      console.error('‚ùå Token verification error:', error);
    }
    return null;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function createToken(userId, expiresIn = '30m') {
  return jwt.sign(
    { 
      userId, 
      sub: userId 
    },
    JWT_SECRET,
    { 
      expiresIn,
      issuer: 'fonana.me',
      audience: 'fonana-websocket'
    }
  );
}

module.exports = {
  verifyToken,
  createToken
}; 