const { createClient } = require('redis');

let redisClient;
let pubClient;
let subClient;

async function connectRedis() {
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è pub/sub
    const redisUrl = process.env.REDIS_URL || 'redis://localhost:6379';
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç
    redisClient = createClient({ url: redisUrl });
    
    // Publisher –∫–ª–∏–µ–Ω—Ç
    pubClient = createClient({ url: redisUrl });
    
    // Subscriber –∫–ª–∏–µ–Ω—Ç
    subClient = createClient({ url: redisUrl });
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    await redisClient.connect();
    await pubClient.connect();
    await subClient.connect();
    
    console.log('‚úÖ Redis connected');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    redisClient.on('error', (err) => console.error('‚ùå Redis Client Error', err));
    pubClient.on('error', (err) => console.error('‚ùå Redis Pub Error', err));
    subClient.on('error', (err) => console.error('‚ùå Redis Sub Error', err));
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π WebSocket
    await subClient.subscribe('ws:events', handleRedisMessage);
    
  } catch (error) {
    console.error('‚ùå Redis connection failed:', error);
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ Redis (single server mode)
    console.log('‚ö†Ô∏è  Running in single server mode without Redis');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Redis
async function handleRedisMessage(message) {
  try {
    const event = JSON.parse(message);
    const { broadcastToSubscribers } = require('./server');
    
    console.log(`üì® Redis event: ${event.type}`);
    
    // –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    broadcastToSubscribers(event.channel, event);
    
  } catch (error) {
    console.error('‚ùå Error handling Redis message:', error);
  }
}

// –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Redis
async function publishEvent(channel, event) {
  if (!pubClient) {
    console.log('‚ö†Ô∏è  Redis not connected, skipping publish');
    return;
  }
  
  try {
    const message = JSON.stringify({
      ...event,
      channel,
      timestamp: new Date().toISOString()
    });
    
    await pubClient.publish('ws:events', message);
    console.log(`üì§ Published to Redis: ${event.type}`);
    
  } catch (error) {
    console.error('‚ùå Failed to publish to Redis:', error);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Redis
async function setCache(key, value, ttl = 3600) {
  if (!redisClient) return;
  
  try {
    await redisClient.set(key, JSON.stringify(value), {
      EX: ttl
    });
  } catch (error) {
    console.error('‚ùå Redis set error:', error);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redis
async function getCache(key) {
  if (!redisClient) return null;
  
  try {
    const value = await redisClient.get(key);
    return value ? JSON.parse(value) : null;
  } catch (error) {
    console.error('‚ùå Redis get error:', error);
    return null;
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redis
async function deleteCache(key) {
  if (!redisClient) return;
  
  try {
    await redisClient.del(key);
  } catch (error) {
    console.error('‚ùå Redis delete error:', error);
  }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
async function disconnectRedis() {
  try {
    if (redisClient) await redisClient.quit();
    if (pubClient) await pubClient.quit();
    if (subClient) await subClient.quit();
    console.log('‚úÖ Redis disconnected');
  } catch (error) {
    console.error('‚ùå Error disconnecting Redis:', error);
  }
}

module.exports = {
  connectRedis,
  disconnectRedis,
  publishEvent,
  setCache,
  getCache,
  deleteCache
}; 