const { broadcastToSubscribers } = require('../server');
const { publishEvent } = require('../redis');

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
async function notifyCreatorUpdate(creatorId, updates) {
  try {
    const event = {
      type: 'creator_updated',
      creatorId,
      data: updates
    };
    
    // –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
    broadcastToSubscribers(
      { type: 'creator', id: creatorId },
      event
    );
    
    // –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis
    await publishEvent(
      { type: 'creator', id: creatorId },
      event
    );
    
    console.log(`üë§ Creator ${creatorId} profile updated`);
    
  } catch (error) {
    console.error('‚ùå Failed to notify creator update:', error);
  }
}

// –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
async function notifyNewSubscription(creatorId, userId) {
  try {
    const event = {
      type: 'new_subscription',
      creatorId,
      userId
    };
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω)
    broadcastToSubscribers(
      { type: 'creator', id: creatorId },
      event
    );
    
    // –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis
    await publishEvent(
      { type: 'creator', id: creatorId },
      event
    );
    
    console.log(`üéâ New subscription: ${userId} ‚Üí ${creatorId}`);
    
  } catch (error) {
    console.error('‚ùå Failed to notify new subscription:', error);
  }
}

module.exports = {
  notifyCreatorUpdate,
  notifyNewSubscription
}; 