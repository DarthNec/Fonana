const { prisma } = require('../db');
const { sendToUser, broadcastToSubscribers } = require('../server');
const { publishEvent } = require('../redis');

// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function sendNotification(userId, notification) {
  try {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î
    const newNotification = await prisma.notification.create({
      data: {
        userId,
        type: notification.type,
        title: notification.title,
        message: notification.message,
        metadata: notification.metadata || {}
      }
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    const event = {
      type: 'notification',
      userId,
      notification: newNotification
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω
    const sent = sendToUser(userId, event);
    
    // –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    await publishEvent(
      { type: 'notifications', userId },
      event
    );
    
    console.log(`üì¨ Notification sent to ${userId}: ${notification.title}`);
    return newNotification;
    
  } catch (error) {
    console.error('‚ùå Failed to send notification:', error);
    throw error;
  }
}

// –ü–æ–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
async function markNotificationAsRead(userId, notificationId) {
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    await prisma.notification.update({
      where: { id: notificationId },
      data: { isRead: true }
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    const event = {
      type: 'notification_read',
      userId,
      notificationId
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    sendToUser(userId, event);
    
    // –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis
    await publishEvent(
      { type: 'notifications', userId },
      event
    );
    
    console.log(`‚úÖ Notification ${notificationId} marked as read`);
    
  } catch (error) {
    console.error('‚ùå Failed to mark notification as read:', error);
  }
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function clearNotifications(userId) {
  try {
    // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    await prisma.notification.updateMany({
      where: {
        userId,
        isRead: false
      },
      data: { isRead: true }
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    const event = {
      type: 'notifications_cleared',
      userId
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    sendToUser(userId, event);
    
    // –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis
    await publishEvent(
      { type: 'notifications', userId },
      event
    );
    
    console.log(`üßπ All notifications cleared for user ${userId}`);
    
  } catch (error) {
    console.error('‚ùå Failed to clear notifications:', error);
  }
}

module.exports = {
  sendNotification,
  markNotificationAsRead,
  clearNotifications
}; 