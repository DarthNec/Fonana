const { prisma } = require('../db');
const { broadcastToSubscribers } = require('../server');
const { publishEvent } = require('../redis');

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤ –ø–æ—Å—Ç–∞
async function updatePostLikes(postId, userId, isLiked) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
    const post = await prisma.post.findUnique({
      where: { id: postId },
      select: { likesCount: true }
    });
    
    if (!post) return;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    const event = {
      type: isLiked ? 'post_liked' : 'post_unliked',
      postId,
      userId,
      likesCount: post.likesCount
    };
    
    // –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø–æ—Å—Ç–∞
    broadcastToSubscribers(
      { type: 'post', postId },
      event
    );
    
    // –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis
    await publishEvent(
      { type: 'post', postId },
      event
    );
    
    console.log(`üíó Post ${postId} ${isLiked ? 'liked' : 'unliked'} by ${userId}`);
    
  } catch (error) {
    console.error('‚ùå Failed to update post likes:', error);
  }
}

// –ù–æ–≤—ã–π –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω
async function notifyNewPost(post) {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    const event = {
      type: 'post_created',
      creatorId: post.creatorId,
      post: {
        id: post.id,
        title: post.title,
        type: post.type,
        thumbnail: post.thumbnail,
        createdAt: post.createdAt
      }
    };
    
    // –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
    broadcastToSubscribers(
      { type: 'creator', id: post.creatorId },
      event
    );
    
    // –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis
    await publishEvent(
      { type: 'creator', id: post.creatorId },
      event
    );
    
    // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–µ–Ω—Ç—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    await notifySubscribersFeeds(post.creatorId, event);
    
    console.log(`üìù New post created by ${post.creatorId}`);
    
  } catch (error) {
    console.error('‚ùå Failed to notify new post:', error);
  }
}

// –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω
async function notifyPostDeleted(postId, creatorId) {
  try {
    const event = {
      type: 'post_deleted',
      postId
    };
    
    // –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø–æ—Å—Ç–∞
    broadcastToSubscribers(
      { type: 'post', postId },
      event
    );
    
    // –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis
    await publishEvent(
      { type: 'post', postId },
      event
    );
    
    console.log(`üóëÔ∏è Post ${postId} deleted`);
    
  } catch (error) {
    console.error('‚ùå Failed to notify post deleted:', error);
  }
}

// –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
async function notifyNewComment(postId, comment) {
  try {
    const event = {
      type: 'comment_added',
      postId,
      comment: {
        id: comment.id,
        userId: comment.userId,
        content: comment.content,
        createdAt: comment.createdAt
      }
    };
    
    // –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø–æ—Å—Ç–∞
    broadcastToSubscribers(
      { type: 'post', postId },
      event
    );
    
    // –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis
    await publishEvent(
      { type: 'post', postId },
      event
    );
    
    console.log(`üí¨ New comment on post ${postId}`);
    
  } catch (error) {
    console.error('‚ùå Failed to notify new comment:', error);
  }
}

// –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω
async function notifyCommentDeleted(postId, commentId) {
  try {
    const event = {
      type: 'comment_deleted',
      postId,
      commentId
    };
    
    // –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø–æ—Å—Ç–∞
    broadcastToSubscribers(
      { type: 'post', postId },
      event
    );
    
    // –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis
    await publishEvent(
      { type: 'post', postId },
      event
    );
    
    console.log(`üóëÔ∏è Comment ${commentId} deleted from post ${postId}`);
    
  } catch (error) {
    console.error('‚ùå Failed to notify comment deleted:', error);
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ª–µ–Ω—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ
async function notifySubscribersFeeds(creatorId, event) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    const subscriptions = await prisma.subscription.findMany({
      where: {
        creatorId,
        isActive: true,
        paymentStatus: 'COMPLETED'
      },
      select: { userId: true }
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –≤ –µ–≥–æ –ª–µ–Ω—Ç—É
    for (const sub of subscriptions) {
      broadcastToSubscribers(
        { type: 'feed', userId: sub.userId },
        event
      );
    }
    
    console.log(`üì¢ Notified ${subscriptions.length} subscribers about new post`);
    
  } catch (error) {
    console.error('‚ùå Failed to notify subscribers feeds:', error);
  }
}

module.exports = {
  updatePostLikes,
  notifyNewPost,
  notifyPostDeleted,
  notifyNewComment,
  notifyCommentDeleted
}; 