const { prisma } = require('../db');
const { sendToUser, broadcastToSubscribers } = require('../server');
const { publishToChannel } = require('../redis'); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤ –ø–æ—Å—Ç–∞
async function updatePostLikes(postId, userId, isLiked) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
    const post = await prisma.post.findUnique({
      where: { id: postId },
      select: { likesCount: true }
    });
    
    if (!post) return;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    const event = {
      type: isLiked ? 'post_liked' : 'post_unliked',
      postId,
      userId,
      likesCount: post.likesCount
    };
    
    // –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø–æ—Å—Ç–∞
    broadcastToSubscribers(
      { type: 'post', postId },
      event
    );
    
    // –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis
    await publishToChannel(
      `ws:post:${postId}`,
      event
    );
    
    console.log(`üíó Post ${postId} ${isLiked ? 'liked' : 'unliked'} by ${userId}`);
    
  } catch (error) {
    console.error('‚ùå Failed to update post likes:', error);
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ
async function notifyNewPost(post, subscriberIds) {
  try {
    console.log(`üì¢ Notifying ${subscriberIds.length} subscribers about new post ${post.id}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    const event = {
      type: 'new_post_from_subscription',
      post: {
        id: post.id,
        title: post.title,
        type: post.type,
        creatorId: post.creatorId,
        createdAt: post.createdAt
      }
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
    for (const subscriberId of subscriberIds) {
      broadcastToSubscribers(
        { type: 'feed', userId: subscriberId },
        event
      );
      
      // –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
      await publishToChannel(
        `ws:feed:${subscriberId}`,
        event
      );
    }
    
    console.log(`‚úÖ Notified ${subscriberIds.length} subscribers successfully`);
    
  } catch (error) {
    console.error('‚ùå Failed to notify subscribers:', error);
  }
}

// NEW: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–µ
async function notifyPostAuthor(post, authorId) {
  try {
    console.log(`üì¢ Notifying post author ${authorId} about new post ${post.id}`);
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    const normalizedPost = {
      id: post.id,
      content: {
        title: post.title || '',
        text: post.content || ''
      },
      media: {
        type: post.type || 'text',
        url: post.mediaUrl || null,
        thumbnail: post.thumbnail || null
      },
      access: {
        isLocked: post.isLocked || false,
        price: post.price || null,
        currency: post.currency || null,
        tier: post.minSubscriptionTier || null
      },
      creator: post.creator || {
        id: authorId,
        nickname: 'Unknown',
        fullName: 'Unknown',
        avatar: null,
        isCreator: true
      },
      engagement: {
        likesCount: 0,
        commentsCount: 0,
        viewsCount: 0
      },
      metadata: {
        createdAt: post.createdAt || new Date().toISOString(),
        updatedAt: post.updatedAt || post.createdAt || new Date().toISOString(),
        category: post.category || 'General'
      }
    };
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∞
    const event = {
      type: 'post_created',
      post: normalizedPost,
      userId: authorId,
      timestamp: new Date().toISOString()
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –∞–≤—Ç–æ—Ä—É –µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω
    const sent = sendToUser(authorId, event);
    
    // –¢–∞–∫–∂–µ —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤ –∫–∞–Ω–∞–ª –ª–µ–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∞
    broadcastToSubscribers(
      { type: 'feed', userId: authorId },
      event
    );
    
    // –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    await publishToChannel(
      `ws:feed:${authorId}`,
      event
    );
    
    console.log(`‚úÖ Post author notification sent: ${sent ? 'direct' : 'channel-only'}`);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Failed to notify post author:', error);
    return false;
  }
}

// –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω
async function notifyPostDeleted(postId, creatorId) {
  try {
    const event = {
      type: 'post_deleted',
      postId
    };
    
    // –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø–æ—Å—Ç–∞
    broadcastToSubscribers(
      { type: 'post', postId },
      event
    );
    
    // –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis
    await publishToChannel(
      `ws:post:${postId}`,
      event
    );
    
    console.log(`üóëÔ∏è Post ${postId} deleted`);
    
  } catch (error) {
    console.error('‚ùå Failed to notify post deleted:', error);
  }
}

// –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
async function notifyNewComment(postId, comment) {
  try {
    const event = {
      type: 'comment_added',
      postId,
      comment: {
        id: comment.id,
        userId: comment.userId,
        content: comment.content,
        createdAt: comment.createdAt
      }
    };
    
    // –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø–æ—Å—Ç–∞
    broadcastToSubscribers(
      { type: 'post', postId },
      event
    );
    
    // –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis
    await publishToChannel(
      `ws:post:${postId}`,
      event
    );
    
    console.log(`üí¨ New comment on post ${postId}`);
    
  } catch (error) {
    console.error('‚ùå Failed to notify new comment:', error);
  }
}

// –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω
async function notifyCommentDeleted(postId, commentId) {
  try {
    const event = {
      type: 'comment_deleted',
      postId,
      commentId
    };
    
    // –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø–æ—Å—Ç–∞
    broadcastToSubscribers(
      { type: 'post', postId },
      event
    );
    
    // –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis
    await publishToChannel(
      `ws:post:${postId}`,
      event
    );
    
    console.log(`üóëÔ∏è Comment ${commentId} deleted from post ${postId}`);
    
  } catch (error) {
    console.error('‚ùå Failed to notify comment deleted:', error);
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ª–µ–Ω—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ
async function notifySubscribersFeeds(creatorId, event) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    const subscriptions = await prisma.subscription.findMany({
      where: {
        creatorId,
        isActive: true,
        paymentStatus: 'COMPLETED'
      },
      select: { userId: true }
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –≤ –µ–≥–æ –ª–µ–Ω—Ç—É
    for (const sub of subscriptions) {
      broadcastToSubscribers(
        { type: 'feed', userId: sub.userId },
        event
      );
    }
    
    console.log(`üì¢ Notified ${subscriptions.length} subscribers about new post`);
    
  } catch (error) {
    console.error('‚ùå Failed to notify subscribers feeds:', error);
  }
}

module.exports = {
  updatePostLikes,
  notifyNewPost,
  notifyPostAuthor,
  notifyPostDeleted,
  notifyNewComment,
  notifyCommentDeleted
}; 