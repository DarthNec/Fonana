// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
console.log('üéØ [TEST SCRIPT] Wallet connection test started')

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ window –æ–±—ä–µ–∫—Ç–∞
if (typeof window !== 'undefined') {
  console.log('‚úÖ Window object available')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
  try {
    const testKey = 'test_wallet_connection'
    localStorage.setItem(testKey, 'test')
    localStorage.removeItem(testKey)
    console.log('‚úÖ localStorage available')
  } catch (error) {
    console.error('‚ùå localStorage not available:', error)
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ—à–µ–ª—å–∫–∞
  if (window.solana) {
    console.log('‚úÖ Solana wallet detected')
    console.log('üìä Solana wallet info:', {
      isConnected: window.solana.isConnected,
      publicKey: window.solana.publicKey?.toBase58(),
      walletName: window.solana.name
    })
  } else {
    console.log('‚ùå Solana wallet not detected')
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Zustand store
  if (window.__ZUSTAND__) {
    console.log('‚úÖ Zustand store detected')
  } else {
    console.log('‚ùå Zustand store not detected')
  }
  
} else {
  console.log('‚ùå Window object not available (SSR)')
}

console.log('üéØ [TEST SCRIPT] Wallet connection test completed') 