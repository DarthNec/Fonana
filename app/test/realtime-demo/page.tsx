'use client'

import { useState, useEffect } from 'react'
import { RealtimePostsContainer } from '@/components/posts/layouts/RealtimePostsContainer'
import { NotificationProvider, useNotifications } from '@/lib/contexts/NotificationContext'
import { useUserContext } from '@/lib/contexts/UserContext'
import { wsService } from '@/lib/services/websocket'
import toast from 'react-hot-toast'
import { 
  BellIcon, 
  WifiIcon,
  ChatBubbleLeftIcon,
  HeartIcon,
  ArrowPathIcon,
  BoltIcon
} from '@heroicons/react/24/outline'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ WebSocket
function WebSocketStatus() {
  const [isConnected, setIsConnected] = useState(false)
  const [stats, setStats] = useState<any>(null)

  useEffect(() => {
    const updateStatus = () => {
      setIsConnected(wsService.isConnected())
      setStats(wsService.getStats())
    }

    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    updateStatus()

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    wsService.on('connected', updateStatus)
    wsService.on('disconnected', updateStatus)

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    const interval = setInterval(updateStatus, 2000)

    return () => {
      wsService.off('connected', updateStatus)
      wsService.off('disconnected', updateStatus)
      clearInterval(interval)
    }
  }, [])

  return (
    <div className="bg-white dark:bg-slate-800 rounded-2xl p-6 border border-gray-200 dark:border-slate-700">
      <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
        <WifiIcon className="w-5 h-5 text-blue-500" />
        WebSocket —Å—Ç–∞—Ç—É—Å
      </h3>

      <div className="space-y-3">
        <div className="flex items-center gap-3">
          <div className={`w-3 h-3 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'} animate-pulse`} />
          <span className="text-gray-700 dark:text-slate-300">
            {isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}
          </span>
        </div>

        {stats && (
          <div className="text-sm text-gray-600 dark:text-slate-400 space-y-1">
            <p>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {stats.subscribedChannels}</p>
            <p>–°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {stats.queuedMessages}</p>
            <p>–ü–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {stats.reconnectAttempts}</p>
            {Object.keys(stats.listeners).length > 0 && (
              <div className="mt-2">
                <p className="font-medium">–°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π:</p>
                <ul className="ml-4 text-xs">
                  {Object.entries(stats.listeners).map(([event, count]) => (
                    <li key={event}>{event}: {count as number}</li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function NotificationsPanel() {
  const { notifications, unreadCount, markAsRead, clearAll } = useNotifications()

  return (
    <div className="bg-white dark:bg-slate-800 rounded-2xl p-6 border border-gray-200 dark:border-slate-700">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-bold text-gray-900 dark:text-white flex items-center gap-2">
          <BellIcon className="w-5 h-5 text-purple-500" />
          –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({unreadCount})
        </h3>
        {notifications.length > 0 && (
          <button
            onClick={clearAll}
            className="text-sm text-red-600 hover:text-red-700 dark:text-red-400"
          >
            –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
          </button>
        )}
      </div>

      <div className="space-y-2 max-h-96 overflow-y-auto">
        {notifications.length === 0 ? (
          <p className="text-gray-500 dark:text-slate-400 text-center py-8">
            –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          </p>
        ) : (
          notifications.map(notification => (
            <div
              key={notification.id}
              onClick={() => !notification.isRead && markAsRead(notification.id)}
              className={`p-3 rounded-lg cursor-pointer transition-all ${
                notification.isRead 
                  ? 'bg-gray-50 dark:bg-slate-700/50' 
                  : 'bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800'
              }`}
            >
              <div className="flex items-start gap-3">
                <div className="text-2xl">{getNotificationIcon(notification.type)}</div>
                <div className="flex-1">
                  <p className="font-medium text-gray-900 dark:text-white">
                    {notification.title}
                  </p>
                  <p className="text-sm text-gray-600 dark:text-slate-400">
                    {notification.message}
                  </p>
                  <p className="text-xs text-gray-500 dark:text-slate-500 mt-1">
                    {new Date(notification.createdAt).toLocaleTimeString()}
                  </p>
                </div>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  )
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function getNotificationIcon(type: string): string {
  switch (type) {
    case 'LIKE_POST':
    case 'LIKE_COMMENT':
      return '‚ù§Ô∏è'
    case 'COMMENT_POST':
    case 'REPLY_COMMENT':
      return 'üí¨'
    case 'NEW_SUBSCRIBER':
      return 'üë§'
    case 'POST_PURCHASE':
      return 'üí∞'
    case 'NEW_MESSAGE':
      return '‚úâÔ∏è'
    case 'TIP_RECEIVED':
      return 'üíé'
    default:
      return 'üîî'
  }
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π
function EventSimulator() {
  const { user } = useUserContext()
  const [selectedPost, setSelectedPost] = useState('')

  const simulateEvent = (type: string) => {
    // –≠—Ç–∏ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
    // –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    toast.success(`–°–∏–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏—è: ${type}`)
  }

  return (
    <div className="bg-white dark:bg-slate-800 rounded-2xl p-6 border border-gray-200 dark:border-slate-700">
      <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
        <BoltIcon className="w-5 h-5 text-yellow-500" />
        –°–∏–º—É–ª—è—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π
      </h3>

      <div className="space-y-3">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-slate-300 mb-2">
            ID –ø–æ—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          </label>
          <input
            type="text"
            value={selectedPost}
            onChange={(e) => setSelectedPost(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ—Å—Ç–∞"
            className="w-full px-4 py-2 bg-gray-50 dark:bg-slate-700 border border-gray-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
          />
        </div>

        <div className="grid grid-cols-2 gap-2">
          <button
            onClick={() => simulateEvent('like')}
            className="px-4 py-2 bg-pink-600 hover:bg-pink-700 text-white rounded-lg font-medium transition-all flex items-center justify-center gap-2"
          >
            <HeartIcon className="w-4 h-4" />
            –õ–∞–π–∫
          </button>
          <button
            onClick={() => simulateEvent('comment')}
            className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-all flex items-center justify-center gap-2"
          >
            <ChatBubbleLeftIcon className="w-4 h-4" />
            –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
          </button>
          <button
            onClick={() => simulateEvent('notification')}
            className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg font-medium transition-all flex items-center justify-center gap-2"
          >
            <BellIcon className="w-4 h-4" />
            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          </button>
          <button
            onClick={() => simulateEvent('new_post')}
            className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-all flex items-center justify-center gap-2"
          >
            <ArrowPathIcon className="w-4 h-4" />
            –ù–æ–≤—ã–π –ø–æ—Å—Ç
          </button>
        </div>

        <div className="mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
          <p className="text-sm text-yellow-700 dark:text-yellow-300">
            üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –¥–≤—É—Ö –≤–∫–ª–∞–¥–∫–∞—Ö –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å –ø–æ—Å—Ç–∞–º–∏
          </p>
        </div>
      </div>
    </div>
  )
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
function RealtimeDemoContent() {
  const [posts, setPosts] = useState<any[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [autoUpdate, setAutoUpdate] = useState(false)
  const { user } = useUserContext()

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤
  useEffect(() => {
    const loadPosts = async () => {
      try {
        setIsLoading(true)
        const response = await fetch('/api/posts?limit=10')
        if (response.ok) {
          const data = await response.json()
          setPosts(data.posts || [])
        }
      } catch (error) {
        console.error('Error loading posts:', error)
      } finally {
        setIsLoading(false)
      }
    }

    loadPosts()
  }, [])

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-slate-900 pt-24 pb-8">
      <div className="max-w-7xl mx-auto px-4">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
            Real-time –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
          </h1>
          <p className="text-gray-600 dark:text-slate-400">
            –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ª–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
          <WebSocketStatus />
          <NotificationsPanel />
          <EventSimulator />
        </div>

        <div className="bg-white dark:bg-slate-800 rounded-2xl p-6 border border-gray-200 dark:border-slate-700 mb-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-bold text-gray-900 dark:text-white">
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–µ–Ω—Ç—ã
            </h2>
            <label className="flex items-center gap-2 cursor-pointer">
              <input
                type="checkbox"
                checked={autoUpdate}
                onChange={(e) => setAutoUpdate(e.target.checked)}
                className="w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500 dark:focus:ring-purple-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
              />
              <span className="text-gray-700 dark:text-slate-300">
                –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
              </span>
            </label>
          </div>
          <p className="text-sm text-gray-600 dark:text-slate-400">
            {autoUpdate 
              ? '–ù–æ–≤—ã–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
              : '–ù–æ–≤—ã–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º'
            }
          </p>
        </div>

        <div>
          <h2 className="text-xl font-bold text-gray-900 dark:text-white mb-4">
            Real-time –ª–µ–Ω—Ç–∞
          </h2>
          {isLoading ? (
            <div className="text-center py-12">
              <ArrowPathIcon className="w-8 h-8 animate-spin text-purple-600 mx-auto" />
              <p className="mt-2 text-gray-600 dark:text-slate-400">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤...</p>
            </div>
          ) : (
            <RealtimePostsContainer
              posts={posts}
              layout="list"
              variant="feed"
              enableRealtime={true}
              autoUpdateFeed={autoUpdate}
              showNewPostsNotification={true}
            />
          )}
        </div>
      </div>
    </div>
  )
}

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
export default function RealtimeDemoPage() {
  return (
    <NotificationProvider>
      <RealtimeDemoContent />
    </NotificationProvider>
  )
} 