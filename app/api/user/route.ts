import { NextRequest, NextResponse } from 'next/server'
import { createOrUpdateUser, getUserByWallet, updateUserProfile, deleteUser, prisma } from '@/lib/db'
import { generateRandomNickname, generateRandomBio, generateFullNameFromNickname } from '@/lib/usernames'
import { referralLogger, apiLogger } from '@/lib/utils/logger'

// –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ route
export const dynamic = 'force-dynamic'
export const revalidate = 0

// GET /api/user?wallet=ADDRESS –∏–ª–∏ /api/user?id=ID –∏–ª–∏ /api/user?nickname=NICKNAME - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const wallet = searchParams.get('wallet')
    const id = searchParams.get('id')
    const nickname = searchParams.get('nickname')

    if (!wallet && !id && !nickname) {
      return NextResponse.json({ error: 'Wallet address, ID or nickname required' }, { status: 400 })
    }

    let user
    if (id) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è ID (–∑–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—ä–µ–∫—Ü–∏–π)
      if (!/^[a-zA-Z0-9]+$/.test(id)) {
        return NextResponse.json({ error: 'Invalid ID format' }, { status: 400 })
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
      user = await prisma.user.findUnique({
        where: { id },
        include: {
          _count: {
            select: {
              posts: true,
              followers: true,
              follows: true,
            },
          },
        },
      })
    } else if (nickname) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è nickname (–∑–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—ä–µ–∫—Ü–∏–π)
      if (!/^[a-zA-Z0-9_.-]+$/.test(nickname)) {
        return NextResponse.json({ error: 'Invalid nickname format' }, { status: 400 })
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É (case-insensitive)
      user = await prisma.user.findFirst({
        where: { 
          nickname: {
            equals: nickname,
            mode: 'insensitive' // Case-insensitive –ø–æ–∏—Å–∫
          }
        },
        include: {
          _count: {
            select: {
              posts: true,
              followers: true,
              follows: true,
            },
          },
        },
      })
    } else if (wallet) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è wallet (–∑–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—ä–µ–∫—Ü–∏–π)
      if (!/^[a-zA-Z0-9]+$/.test(wallet)) {
        return NextResponse.json({ error: 'Invalid wallet format' }, { status: 400 })
      }
      
      console.log('üéØ [API USER] Searching for user with wallet:', wallet)
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ wallet —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–∏—Å–∫ –ø–æ solanaWallet
      user = await prisma.user.findFirst({
        where: {
          OR: [
            { wallet: wallet },
            { solanaWallet: wallet } // üî• –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ü–æ–∏—Å–∫ –ø–æ solanaWallet
          ]
        },
        include: {
          _count: {
            select: {
              posts: true,
              followers: true,
              follows: true,
            },
          },
        },
      })
      
      console.log('üéØ [API USER] Search result:', {
        found: !!user,
        userId: user?.id,
        userWallet: user?.wallet,
        userSolanaWallet: user?.solanaWallet,
        userNickname: user?.nickname
      })
    }
    
    if (!user) {
      console.log('üéØ [API USER] User not found, creating new user with wallet:', wallet)
      
      try {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await prisma.user.create({
          data: {
            wallet: wallet!,
            nickname: `user_${wallet!.slice(0, 8).toLowerCase()}`,
            solanaWallet: wallet!
          },
          include: {
            _count: {
              select: {
                posts: true,
                followers: true,
                follows: true,
              },
            },
          },
        })
        
        console.log('üéØ [API USER] New user created successfully:', {
          userId: user.id,
          userWallet: user.wallet,
          userSolanaWallet: user.solanaWallet,
          userNickname: user.nickname
        })
      } catch (error) {
        console.error('üéØ [API USER] Failed to create user:', error)
        return NextResponse.json({ error: 'Failed to create user' }, { status: 500 })
      }
    }

    const response = NextResponse.json({ user })
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate')
    response.headers.set('Pragma', 'no-cache')
    response.headers.set('Expires', '0')
    return response
  } catch (error) {
    console.error('Error getting user:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// POST /api/user - —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { wallet, referrerFromClient } = body

    if (!wallet) {
      return NextResponse.json({ error: 'Wallet address required' }, { status: 400 })
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await getUserByWallet(wallet)
    
    if (existingUser) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏–∫–Ω–µ–π–º –∏ –ø–æ–ª–Ω–æ–µ –∏–º—è
      // bio —è–≤–ª—è–µ—Ç—Å—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–ª–µ–º –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
      const isProfileEmpty = !existingUser.nickname || !existingUser.fullName
      
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
      const response = NextResponse.json({ 
        user: existingUser,
        isNewUser: isProfileEmpty // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç–æ–π
      })
      response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate')
      return response
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º cookie —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º
    const referrerCookie = request.cookies.get('fonana_referrer')
    let referrerNickname = referrerCookie?.value
    
    // Fallback –Ω–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ (localStorage)
    if (!referrerNickname && referrerFromClient) {
      referrerNickname = referrerFromClient
      referralLogger.info('Using referrer from localStorage fallback', {
        referrer: referrerNickname,
        wallet: wallet.slice(0, 8) + '...'
      })
    }
    
    if (referrerNickname) {
      referralLogger.info('Creating user with referrer', {
        referrer: referrerNickname,
        wallet: wallet.slice(0, 8) + '...',
        source: referrerCookie ? 'cookie' : 'localStorage'
      })
    } else {
      referralLogger.info('Creating user without referrer', {
        wallet: wallet.slice(0, 8) + '...'
      })
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –∑–∞–ø–æ–ª–Ω–∏—Ç –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª–∫—É
    const newUser = await createOrUpdateUser(wallet, {
      // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω–∏–ª –∏—Ö —Å–∞–º
      nickname: undefined,
      fullName: undefined,
      bio: undefined
    }, referrerNickname)
    
    const response = NextResponse.json({ 
      user: newUser,
      isNewUser: true // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω —É–≤–∏–¥–µ—Ç—å –º–æ–¥–∞–ª–∫—É
    })
    response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate')
    return response
  } catch (error) {
    console.error('Error creating/updating user:', error)
    apiLogger.error('Failed to create/update user', {
      error: error instanceof Error ? error.message : 'Unknown error',
      wallet: request.body ? JSON.parse(await request.text()).wallet : 'unknown'
    })
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// PUT /api/user - –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function PUT(request: NextRequest) {
  try {
    const body = await request.json()
    const { wallet, ...profileData } = body

    if (!wallet) {
      return NextResponse.json({ error: 'Wallet address required' }, { status: 400 })
    }

    const user = await updateUserProfile(wallet, profileData)

    return NextResponse.json({ user })
  } catch (error) {
    console.error('Error updating user profile:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// DELETE /api/user - —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function DELETE(request: NextRequest) {
  try {
    const body = await request.json()
    const { wallet } = body

    if (!wallet) {
      return NextResponse.json({ error: 'Wallet address required' }, { status: 400 })
    }

    await deleteUser(wallet)

    return NextResponse.json({ success: true, message: 'User account deleted successfully' })
  } catch (error) {
    console.error('Error deleting user:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
} 