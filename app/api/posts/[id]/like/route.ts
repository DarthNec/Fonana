import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { notifyPostLike } from '@/lib/notifications'
import { validateApiRequest, likePostSchema } from '@/lib/utils/validators'

// WebSocket —Å–æ–±—ã—Ç–∏—è
import { updatePostLikes, sendNotification } from '@/lib/services/websocket-client'

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const userId = request.nextUrl.searchParams.get('userId')
    
    if (!userId) {
      return NextResponse.json({ isLiked: false, likesCount: 0 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–∞–π–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const like = await prisma.like.findUnique({
      where: {
        userId_postId: {
          userId,
          postId: params.id
        }
      }
    })

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
    const post = await prisma.post.findUnique({
      where: { id: params.id },
      select: { likesCount: true }
    })

    return NextResponse.json({
      isLiked: !!like,
      likesCount: post?.likesCount || 0
    })
  } catch (error) {
    console.error('Error getting like status:', error)
    return NextResponse.json(
      { error: 'Failed to get like status' },
      { status: 500 }
    )
  }
}

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log('üéØ [LIKE API] POST request received for post:', params.id)
    
    const body = await request.json()
    console.log('üéØ [LIKE API] Request body:', body)
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validatedData = validateApiRequest(likePostSchema, {
      postId: params.id,
      userId: body.userId
    })

    const { userId } = validatedData
    console.log('üéØ [LIKE API] Validated userId:', userId)
    
    if (!userId) {
      console.error('üéØ [LIKE API] No userId provided')
      return NextResponse.json(
        { error: 'User ID is required' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Å—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
    const post = await prisma.post.findUnique({
      where: { id: params.id },
      include: { 
        creator: true
      }
    })

    console.log('üéØ [LIKE API] Post found:', {
      postId: post?.id,
      postTitle: post?.title,
      creatorId: post?.creatorId,
      currentLikesCount: post?.likesCount
    })

    if (!post) {
      console.error('üéØ [LIKE API] Post not found:', params.id)
      return NextResponse.json(
        { error: 'Post not found' },
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–∞–π–∫
    const existingLike = await prisma.like.findUnique({
      where: {
        userId_postId: {
          userId,
          postId: params.id
        }
      }
    })

    console.log('üéØ [LIKE API] Existing like check:', {
      userId,
      postId: params.id,
      existingLike: !!existingLike,
      likeId: existingLike?.id
    })

    if (existingLike) {
      console.log('üéØ [LIKE API] Removing like...')
      
      // –£–¥–∞–ª—è–µ–º –ª–∞–π–∫
      await prisma.$transaction([
        prisma.like.delete({
          where: { id: existingLike.id }
        }),
        prisma.post.update({
          where: { id: params.id },
          data: { likesCount: { decrement: 1 } }
        })
      ])

      const newLikesCount = post.likesCount - 1
      console.log('üéØ [LIKE API] Like removed successfully. New count:', newLikesCount)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞
      try {
        await updatePostLikes(params.id, newLikesCount, userId)
      } catch (error) {
        console.error('WebSocket notification failed:', error)
      }

      const response = {
        success: true,
        isLiked: false,
        likesCount: newLikesCount,
        action: 'unliked'
      }
      
      console.log('üéØ [LIKE API] Returning response:', response)
      return NextResponse.json(response)
    } else {
      console.log('üéØ [LIKE API] Adding like...')
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
      await prisma.$transaction([
        prisma.like.create({
          data: {
            userId,
            postId: params.id
          }
        }),
        prisma.post.update({
          where: { id: params.id },
          data: { likesCount: { increment: 1 } }
        })
      ])

      const newLikesCount = post.likesCount + 1
      console.log('üéØ [LIKE API] Like added successfully. New count:', newLikesCount)

      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Å—Ç)
      if (post.creatorId !== userId) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫
        const liker = await prisma.user.findUnique({
          where: { id: userId },
          select: { nickname: true, fullName: true }
        })
        
        if (liker) {
          const likerName = liker.fullName || liker.nickname || 'Someone'
          const postTitle = post.title || 'your post'
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–≤—Ç–æ—Ä–∞
          const authorSettings = await prisma.userSettings.findUnique({
            where: { userId: post.creatorId }
          })
          
          if (!authorSettings || authorSettings.notifyLikes) {
            await notifyPostLike(post.creatorId, likerName, postTitle, post.id)
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            try {
              await sendNotification(post.creatorId, {
                type: 'LIKE_POST',
                title: '–ù–æ–≤—ã–π –ª–∞–π–∫',
                message: `${likerName} –ª–∞–π–∫–Ω—É–ª –≤–∞—à –ø–æ—Å—Ç "${postTitle}"`,
                metadata: { postId: post.id, userId }
              })
            } catch (error) {
              console.error('WebSocket notification failed:', error)
            }
          }
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–º –ª–∞–π–∫–µ
      try {
        await updatePostLikes(params.id, newLikesCount, userId)
      } catch (error) {
        console.error('WebSocket notification failed:', error)
      }

      const response = {
        success: true,
        isLiked: true,
        likesCount: newLikesCount,
        action: 'liked'
      }
      
      console.log('üéØ [LIKE API] Returning response:', response)
      return NextResponse.json(response)
    }
  } catch (error) {
    console.error('Error toggling like:', error)
    return NextResponse.json(
      { error: 'Failed to toggle like' },
      { status: 500 }
    )
  }
} 