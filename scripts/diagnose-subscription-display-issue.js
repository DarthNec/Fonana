const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function diagnoseSubscriptionDisplayIssue() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï–ú –ü–û–î–ü–ò–°–û–ö\n')
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–ª–∞–Ω–æ–≤ –≤ –ë–î
    console.log('1Ô∏è‚É£ –§–û–†–ú–ê–¢–´ –ü–õ–ê–ù–û–í –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:')
    const planFormats = await prisma.subscription.groupBy({
      by: ['plan'],
      _count: true,
      where: {
        isActive: true,
        paymentStatus: 'COMPLETED'
      }
    })
    
    console.log('–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –ø–ª–∞–Ω–∞–º:')
    planFormats.forEach(p => {
      console.log(`  ${p.plan}: ${p._count} –ø–æ–¥–ø–∏—Å–æ–∫`)
    })
    
    // 2. –ù–∞–π—Ç–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º—ã
    console.log('\n2Ô∏è‚É£ –ù–ï–î–ê–í–ù–ò–ï –ü–û–î–ü–ò–°–ö–ò –° –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú–ò:')
    const recentSubs = await prisma.subscription.findMany({
      where: {
        subscribedAt: { gte: new Date(Date.now() - 24 * 60 * 60 * 1000) },
        price: { gt: 0 },
        paymentStatus: 'COMPLETED'
      },
      include: {
        user: { select: { nickname: true, wallet: true } },
        creator: { 
          select: { 
            nickname: true,
            tierSettings: true
          } 
        }
      },
      orderBy: { subscribedAt: 'desc' },
      take: 5
    })
    
    for (const sub of recentSubs) {
      console.log(`\nüìå ${sub.user.nickname} ‚Üí ${sub.creator.nickname}:`)
      console.log(`  –ü–ª–∞–Ω –≤ –ë–î: "${sub.plan}"`)
      console.log(`  –¶–µ–Ω–∞: ${sub.price} SOL`)
      console.log(`  –°–æ–∑–¥–∞–Ω–æ: ${sub.subscribedAt.toISOString()}`)
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏—Ä–æ–≤
      if (sub.creator.tierSettings) {
        const settings = sub.creator.tierSettings
        console.log(`  –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–µ–Ω—ã —Å–æ–∑–¥–∞—Ç–µ–ª—è:`)
        if (settings.basicTier) {
          const basic = typeof settings.basicTier === 'string' ? JSON.parse(settings.basicTier) : settings.basicTier
          console.log(`    Basic: ${basic.price} SOL`)
        }
        if (settings.premiumTier) {
          const premium = typeof settings.premiumTier === 'string' ? JSON.parse(settings.premiumTier) : settings.premiumTier
          console.log(`    Premium: ${premium.price} SOL`)
        }
        if (settings.vipTier) {
          const vip = typeof settings.vipTier === 'string' ? JSON.parse(settings.vipTier) : settings.vipTier
          console.log(`    VIP: ${vip.price} SOL`)
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const transaction = await prisma.transaction.findFirst({
        where: { subscriptionId: sub.id }
      })
      
      if (transaction?.metadata) {
        const metadata = transaction.metadata
        console.log(`  –ü–ª–∞–Ω –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: "${metadata.plan}"`)
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –ø–ª–∞–Ω/—Ü–µ–Ω–∞
    console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ô –ü–õ–ê–ù/–¶–ï–ù–ê:')
    
    const standardPrices = {
      'Basic': 0.05,
      'Premium': 0.15,
      'VIP': 0.35
    }
    
    for (const [plan, expectedPrice] of Object.entries(standardPrices)) {
      const wrongPriceSubs = await prisma.subscription.count({
        where: {
          plan,
          price: { not: expectedPrice },
          isActive: true,
          creator: {
            tierSettings: null // –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª–∏ –±–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ü–µ–Ω
          }
        }
      })
      
      if (wrongPriceSubs > 0) {
        console.log(`  ‚ö†Ô∏è  ${plan}: ${wrongPriceSubs} –ø–æ–¥–ø–∏—Å–æ–∫ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π`)
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
    console.log('\n4Ô∏è‚É£ –ü–û–°–¢–´ –° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø–ú–ò –ü–û –¢–ò–†–ê–ú:')
    const tieredPosts = await prisma.post.groupBy({
      by: ['minSubscriptionTier'],
      _count: true,
      where: {
        minSubscriptionTier: { not: null }
      }
    })
    
    console.log('–ü–æ—Å—Ç—ã –ø–æ —Ç—Ä–µ–±—É–µ–º—ã–º —Ç–∏—Ä–∞–º:')
    tieredPosts.forEach(p => {
      console.log(`  ${p.minSubscriptionTier}: ${p._count} –ø–æ—Å—Ç–æ–≤`)
    })
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è
    console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –°–õ–£–ß–ê–Ø:')
    console.log('–í–≤–µ–¥–∏—Ç–µ nickname –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:')
    console.log('–ü—Ä–∏–º–µ—Ä: node scripts/diagnose-subscription-display-issue.js username creatorname')
    
    const userNick = process.argv[2]
    const creatorNick = process.argv[3]
    
    if (userNick && creatorNick) {
      const user = await prisma.user.findFirst({
        where: { nickname: userNick }
      })
      
      const creator = await prisma.user.findFirst({
        where: { nickname: creatorNick }
      })
      
      if (user && creator) {
        const subscription = await prisma.subscription.findUnique({
          where: {
            userId_creatorId: {
              userId: user.id,
              creatorId: creator.id
            }
          }
        })
        
        if (subscription) {
          console.log(`\n–ü–æ–¥–ø–∏—Å–∫–∞ ${userNick} –Ω–∞ ${creatorNick}:`)
          console.log(`  ID: ${subscription.id}`)
          console.log(`  –ü–ª–∞–Ω: "${subscription.plan}"`)
          console.log(`  –¶–µ–Ω–∞: ${subscription.price} SOL`)
          console.log(`  –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: ${subscription.paymentStatus}`)
          console.log(`  –ê–∫—Ç–∏–≤–Ω–∞: ${subscription.isActive}`)
          console.log(`  –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${subscription.validUntil}`)
          
          // –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å—Ç–∞–º
          const lockedPosts = await prisma.post.findMany({
            where: {
              creatorId: creator.id,
              isLocked: true,
              minSubscriptionTier: { not: null }
            },
            select: {
              title: true,
              minSubscriptionTier: true
            }
          })
          
          console.log(`\n–î–æ—Å—Ç—É–ø –∫ –ø–æ—Å—Ç–∞–º:`)
          const TIER_HIERARCHY = {
            'vip': 4,
            'premium': 3,
            'basic': 2,
            'free': 1
          }
          
          lockedPosts.forEach(post => {
            const userLevel = TIER_HIERARCHY[subscription.plan.toLowerCase()] || 0
            const requiredLevel = TIER_HIERARCHY[post.minSubscriptionTier.toLowerCase()] || 0
            const hasAccess = userLevel >= requiredLevel
            
            console.log(`  "${post.title}" (—Ç—Ä–µ–±—É–µ—Ç ${post.minSubscriptionTier}): ${hasAccess ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}`)
          })
        } else {
          console.log(`\n‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ ${userNick} –Ω–∞ ${creatorNick} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
        }
      }
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')
    console.log('1. –ü–ª–∞–Ω—ã –≤ –ë–î —Ö—Ä–∞–Ω—è—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã: "Basic", "Premium", "VIP"')
    console.log('2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è .toLowerCase()')
    console.log('3. –ü—Ä–æ–±–ª–µ–º–∞ –≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ - –Ω—É–∂–Ω–æ –≤–µ–∑–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .toLowerCase() –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏')
    console.log('4. SubscribeModal –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–∞–Ω—ã —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã')
    console.log('5. –ù—É–∂–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

diagnoseSubscriptionDisplayIssue() 