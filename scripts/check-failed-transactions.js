const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkAllDogwaterTransactions() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Dogwater (–≤–∫–ª—é—á–∞—è –Ω–µ—É–¥–∞—á–Ω—ã–µ)...\n');
    
    // –ù–∞–π–¥–µ–º Dogwater
    const dogwater = await prisma.user.findFirst({ 
      where: { nickname: 'Dogwater' },
      select: { id: true, nickname: true, wallet: true }
    });
    
    if (!dogwater) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Dogwater –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('üë§ Dogwater:', dogwater.wallet);
    
    // –ü–æ–ª—É—á–∏–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è FAILED –∏ PENDING)
    const allTransactions = await prisma.transaction.findMany({
      where: {
        OR: [
          { fromWallet: dogwater.wallet },
          { senderId: dogwater.id }
        ]
      },
      orderBy: { createdAt: 'desc' }
    });
    
    console.log(`\nüìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${allTransactions.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
    const byStatus = {
      CONFIRMED: [],
      FAILED: [],
      PENDING: [],
      EXPIRED: []
    };
    
    allTransactions.forEach(tx => {
      if (byStatus[tx.status]) {
        byStatus[tx.status].push(tx);
      }
    });
    
    console.log('\nüìà –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
    console.log(`- CONFIRMED: ${byStatus.CONFIRMED.length}`);
    console.log(`- FAILED: ${byStatus.FAILED.length}`);
    console.log(`- PENDING: ${byStatus.PENDING.length}`);
    console.log(`- EXPIRED: ${byStatus.EXPIRED.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (byStatus.FAILED.length > 0) {
      console.log('\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
      byStatus.FAILED.forEach((tx, index) => {
        console.log(`\n${index + 1}. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${tx.id}:`);
        console.log('   - –°—É–º–º–∞:', tx.amount, 'SOL');
        console.log('   - –¢–∏–ø:', tx.type);
        console.log('   - –ù–∞ –∫–æ—à–µ–ª–µ–∫:', tx.toWallet);
        console.log('   - –î–∞—Ç–∞:', tx.createdAt);
        console.log('   - –ü–æ–¥–ø–∏—Å—å:', tx.txSignature);
        console.log('   - –û—à–∏–±–∫–∞:', tx.errorMessage);
      });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (byStatus.PENDING.length > 0) {
      console.log('\n‚è≥ –û–ñ–ò–î–ê–Æ–©–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
      byStatus.PENDING.forEach((tx, index) => {
        console.log(`\n${index + 1}. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${tx.id}:`);
        console.log('   - –°—É–º–º–∞:', tx.amount, 'SOL');
        console.log('   - –¢–∏–ø:', tx.type);
        console.log('   - –ù–∞ –∫–æ—à–µ–ª–µ–∫:', tx.toWallet);
        console.log('   - –î–∞—Ç–∞:', tx.createdAt);
        console.log('   - –ü–æ–¥–ø–∏—Å—å:', tx.txSignature);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ Dogwater:');
    
    const subscriptions = await prisma.subscription.findMany({
      where: { userId: dogwater.id },
      include: {
        creator: {
          select: { nickname: true }
        }
      },
      orderBy: { createdAt: 'desc' }
    });
    
    subscriptions.forEach((sub, index) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω—ã —Ç–∏—Ä—É
      const expectedPrices = {
        'Free': 0,
        'Basic': 0.05,
        'Premium': 0.15,
        'VIP': 0.35
      };
      
      const expectedPrice = expectedPrices[sub.plan];
      const priceCorrect = sub.price === expectedPrice;
      
      console.log(`\n${index + 1}. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${sub.creator.nickname}:`);
      console.log('   - –ü–ª–∞–Ω:', sub.plan);
      console.log('   - –¶–µ–Ω–∞:', sub.price, 'SOL', priceCorrect ? '‚úÖ' : '‚ö†Ô∏è –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –¶–ï–ù–ê!');
      if (!priceCorrect) {
        console.log('   - –û–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞:', expectedPrice, 'SOL');
      }
      console.log('   - –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:', sub.paymentStatus);
      console.log('   - –î–∞—Ç–∞:', sub.createdAt);
    });
    
    // –°—É–º–º–∞ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const totalSpent = byStatus.CONFIRMED.reduce((sum, tx) => sum + tx.amount, 0);
    console.log(`\nüí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalSpent.toFixed(4)} SOL`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkAllDogwaterTransactions(); 