#!/usr/bin/env node

// [webp_mass_conversion_2025_017] –ú–∞—Å—Å–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ WebP
const fs = require('fs').promises
const path = require('path')
const sharp = require('sharp')
const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  sourceDir: 'public',
  backupDir: 'backup-images-before-webp',
  mapFile: 'webp-conversion-map.json',
  qualitySettings: {
    avatars: 85,
    backgrounds: 80,
    posts: 85,
    thumbnails: 80,
    placeholders: 75
  },
  excludePatterns: [
    /favicon/i,
    /\.ico$/,
    /\.svg$/,
    /\.webp$/  // –£–∂–µ –≤ WebP
  ]
}

// ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m'
}

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`)
}

// –§—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function scanImages(dir) {
  const images = []
  
  async function scanRecursive(currentDir) {
    const entries = await fs.readdir(currentDir, { withFileTypes: true })
    
    for (const entry of entries) {
      const fullPath = path.join(currentDir, entry.name)
      
      if (entry.isDirectory()) {
        await scanRecursive(fullPath)
      } else if (entry.isFile()) {
        const ext = path.extname(entry.name).toLowerCase()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        if (['.jpg', '.jpeg', '.png', '.gif'].includes(ext)) {
          const shouldExclude = CONFIG.excludePatterns.some(pattern => 
            pattern.test(entry.name) || pattern.test(fullPath)
          )
          
          if (!shouldExclude) {
            const stats = await fs.stat(fullPath)
            images.push({
              originalPath: fullPath,
              name: entry.name,
              extension: ext,
              size: stats.size,
              category: getImageCategory(fullPath)
            })
          }
        }
      }
    }
  }
  
  await scanRecursive(dir)
  return images
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
function getImageCategory(filePath) {
  if (filePath.includes('/avatars/')) return 'avatars'
  if (filePath.includes('/backgrounds/')) return 'backgrounds'
  if (filePath.includes('/posts/')) return 'posts'
  if (filePath.includes('thumb_')) return 'thumbnails'
  if (filePath.includes('placeholder')) return 'placeholders'
  return 'posts' // default
}

// –°–æ–∑–¥–∞–Ω–∏–µ backup
async function createBackup(images) {
  log('\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ backup...', 'yellow')
  
  try {
    await fs.mkdir(CONFIG.backupDir, { recursive: true })
    
    for (const image of images) {
      const relativePath = path.relative(CONFIG.sourceDir, image.originalPath)
      const backupPath = path.join(CONFIG.backupDir, relativePath)
      const backupDir = path.dirname(backupPath)
      
      await fs.mkdir(backupDir, { recursive: true })
      await fs.copyFile(image.originalPath, backupPath)
    }
    
    log(`‚úÖ Backup —Å–æ–∑–¥–∞–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${CONFIG.backupDir}`, 'green')
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup: ${error.message}`, 'red')
    throw error
  }
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ WebP
async function convertToWebP(image) {
  const quality = CONFIG.qualitySettings[image.category]
  const originalPath = image.originalPath
  const webpPath = originalPath.replace(/\.(jpg|jpeg|png|gif)$/i, '.webp')
  
  try {
    const startTime = Date.now()
    
    await sharp(originalPath)
      .webp({ quality })
      .toFile(webpPath)
    
    const originalStats = await fs.stat(originalPath)
    const webpStats = await fs.stat(webpPath)
    const compressionRatio = ((originalStats.size - webpStats.size) / originalStats.size * 100).toFixed(1)
    const duration = Date.now() - startTime
    
    return {
      originalPath,
      webpPath,
      originalSize: originalStats.size,
      webpSize: webpStats.size,
      compressionRatio: parseFloat(compressionRatio),
      duration,
      success: true
    }
  } catch (error) {
    return {
      originalPath,
      webpPath,
      error: error.message,
      success: false
    }
  }
}

// –ú–∞—Å—Å–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
async function massConvert(images) {
  log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...', 'cyan')
  
  const results = []
  const total = images.length
  let completed = 0
  let totalOriginalSize = 0
  let totalWebpSize = 0
  
  for (const image of images) {
    const result = await convertToWebP(image)
    results.push(result)
    completed++
    
    if (result.success) {
      totalOriginalSize += result.originalSize
      totalWebpSize += result.webpSize
      
      log(
        `‚úÖ [${completed}/${total}] ${path.basename(result.originalPath)} ‚Üí ${result.compressionRatio}% —ç–∫–æ–Ω–æ–º–∏–∏ (${result.duration}ms)`,
        'green'
      )
    } else {
      log(
        `‚ùå [${completed}/${total}] ${path.basename(result.originalPath)} - –û–®–ò–ë–ö–ê: ${result.error}`,
        'red'
      )
    }
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Ñ–∞–π–ª–æ–≤
    if (completed % 50 === 0) {
      const progress = (completed / total * 100).toFixed(1)
      log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}% (${completed}/${total})`, 'blue')
    }
  }
  
  const overallCompression = ((totalOriginalSize - totalWebpSize) / totalOriginalSize * 100).toFixed(1)
  
  log('\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò:', 'magenta')
  log(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${total}`, 'cyan')
  log(`   –£—Å–ø–µ—à–Ω–æ: ${results.filter(r => r.success).length}`, 'green')
  log(`   –û—à–∏–±–æ–∫: ${results.filter(r => !r.success).length}`, 'red')
  log(`   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(totalOriginalSize / 1024 / 1024).toFixed(2)} MB`, 'yellow')
  log(`   WebP —Ä–∞–∑–º–µ—Ä: ${(totalWebpSize / 1024 / 1024).toFixed(2)} MB`, 'yellow')
  log(`   –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${overallCompression}%`, 'green')
  
  return results
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
function createConversionMap(results) {
  const map = {
    timestamp: new Date().toISOString(),
    totalFiles: results.length,
    successfulConversions: results.filter(r => r.success).length,
    conversions: {}
  }
  
  for (const result of results) {
    if (result.success) {
      // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –≤ –ë–î
      const originalRelative = result.originalPath.replace('public/', '/')
      const webpRelative = result.webpPath.replace('public/', '/')
      
      map.conversions[originalRelative] = {
        webpPath: webpRelative,
        originalSize: result.originalSize,
        webpSize: result.webpSize,
        compressionRatio: result.compressionRatio
      }
    }
  }
  
  return map
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function updateDatabase(conversionMap) {
  log('\nüíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', 'yellow')
  
  const updates = {
    users: { avatar: 0, backgroundImage: 0 },
    posts: { mediaUrl: 0, thumbnail: 0 }
  }
  
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const [originalPath, conversion] of Object.entries(conversionMap.conversions)) {
      await prisma.user.updateMany({
        where: { avatar: originalPath },
        data: { avatar: conversion.webpPath }
      })
      
      const avatarUpdates = await prisma.user.count({
        where: { avatar: conversion.webpPath }
      })
      updates.users.avatar += avatarUpdates
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const [originalPath, conversion] of Object.entries(conversionMap.conversions)) {
      await prisma.user.updateMany({
        where: { backgroundImage: originalPath },
        data: { backgroundImage: conversion.webpPath }
      })
      
      const bgUpdates = await prisma.user.count({
        where: { backgroundImage: conversion.webpPath }
      })
      updates.users.backgroundImage += bgUpdates
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –ø–æ—Å—Ç–æ–≤
    for (const [originalPath, conversion] of Object.entries(conversionMap.conversions)) {
      await prisma.post.updateMany({
        where: { mediaUrl: originalPath },
        data: { mediaUrl: conversion.webpPath }
      })
      
      const mediaUpdates = await prisma.post.count({
        where: { mediaUrl: conversion.webpPath }
      })
      updates.posts.mediaUrl += mediaUpdates
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º thumbnail –ø–æ—Å—Ç–æ–≤
    for (const [originalPath, conversion] of Object.entries(conversionMap.conversions)) {
      await prisma.post.updateMany({
        where: { thumbnail: originalPath },
        data: { thumbnail: conversion.webpPath }
      })
      
      const thumbUpdates = await prisma.post.count({
        where: { thumbnail: conversion.webpPath }
      })
      updates.posts.thumbnail += thumbUpdates
    }
    
    log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', 'green')
    log(`   –ê–≤–∞—Ç–∞—Ä—ã: ${updates.users.avatar} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`, 'cyan')
    log(`   –§–æ–Ω—ã: ${updates.users.backgroundImage} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`, 'cyan')
    log(`   –ú–µ–¥–∏–∞ –ø–æ—Å—Ç–æ–≤: ${updates.posts.mediaUrl} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`, 'cyan')
    log(`   Thumbnail: ${updates.posts.thumbnail} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`, 'cyan')
    
    return updates
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: ${error.message}`, 'red')
    throw error
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
async function cleanupOriginalFiles(conversionMap) {
  log('\nüóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...', 'yellow')
  
  let deleted = 0
  
  for (const [originalPath] of Object.entries(conversionMap.conversions)) {
    try {
      const fullPath = path.join('public', originalPath.substring(1)) // —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π '/'
      await fs.unlink(fullPath)
      deleted++
    } catch (error) {
      log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ${originalPath}: ${error.message}`, 'yellow')
    }
  }
  
  log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deleted} –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤`, 'green')
  return deleted
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  log('üöÄ –ú–ê–°–°–û–í–ê–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í WEBP –ù–ê–ß–ê–õ–ê–°–¨', 'magenta')
  log('=' + '='.repeat(50), 'magenta')
  
  try {
    // 1. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    log('\nüîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...', 'cyan')
    const images = await scanImages(CONFIG.sourceDir)
    
    log(`üìã –ù–∞–π–¥–µ–Ω–æ ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:`, 'blue')
    const categoryCounts = images.reduce((acc, img) => {
      acc[img.category] = (acc[img.category] || 0) + 1
      return acc
    }, {})
    
    for (const [category, count] of Object.entries(categoryCounts)) {
      log(`   ${category}: ${count} —Ñ–∞–π–ª–æ–≤`, 'yellow')
    }
    
    if (images.length === 0) {
      log('‚úÖ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!', 'green')
      return
    }
    
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ backup
    await createBackup(images)
    
    // 3. –ú–∞—Å—Å–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    const results = await massConvert(images)
    
    // 4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const conversionMap = createConversionMap(results)
    await fs.writeFile(CONFIG.mapFile, JSON.stringify(conversionMap, null, 2))
    log(`üíæ –ö–∞—Ä—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${CONFIG.mapFile}`, 'green')
    
    // 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await updateDatabase(conversionMap)
    
    // 6. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
    log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã? (y/N):', 'yellow')
    // –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å:
    // await cleanupOriginalFiles(conversionMap)
    
    log('\nüéâ –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!', 'green')
    log('=' + '='.repeat(50), 'green')
    
  } catch (error) {
    log(`üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${error.message}`, 'red')
    log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ backup –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤', 'yellow')
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(console.error)
}

module.exports = { main, scanImages, convertToWebP, createConversionMap } 