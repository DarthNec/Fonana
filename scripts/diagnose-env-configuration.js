#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø\n');
console.log('=' .repeat(50));

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤
console.log('\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤:');
const envFiles = ['.env', '.env.local', '.env.production', 'websocket-server/.env'];

envFiles.forEach(file => {
  const filePath = path.join('/var/www/Fonana', file);
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, 'utf8');
    const hasNextAuthSecret = content.includes('NEXTAUTH_SECRET=');
    const nextAuthLine = content.split('\n').find(line => line.startsWith('NEXTAUTH_SECRET='));
    
    console.log(`\n‚úÖ ${file}:`);
    console.log(`   - –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    console.log(`   - NEXTAUTH_SECRET: ${hasNextAuthSecret ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    if (nextAuthLine) {
      const hasQuotes = nextAuthLine.includes('"');
      console.log(`   - –ö–∞–≤—ã—á–∫–∏: ${hasQuotes ? '–ï–°–¢–¨ ‚ö†Ô∏è' : '–Ω–µ—Ç ‚úÖ'}`);
      console.log(`   - –î–ª–∏–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è: ${nextAuthLine.split('=')[1].length}`);
    }
  } else {
    console.log(`\n‚ùå ${file}: –ù–ï –ù–ê–ô–î–ï–ù`);
  }
});

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ PM2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log('\n\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ PM2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
try {
  const ecosystemPath = '/var/www/Fonana/ecosystem.config.js';
  const ecosystemContent = fs.readFileSync(ecosystemPath, 'utf8');
  
  console.log('‚úÖ ecosystem.config.js –Ω–∞–π–¥–µ–Ω');
  console.log(`   - env_file –¥–ª—è fonana: ${ecosystemContent.includes("env_file: './.env'") ? '–µ—Å—Ç—å ‚úÖ' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå'}`);
  console.log(`   - env_file –¥–ª—è fonana-ws: ${ecosystemContent.match(/fonana-ws[\s\S]*?env_file/) ? '–µ—Å—Ç—å ‚úÖ' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå'}`);
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ecosystem.config.js:', error.message);
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ PM2
console.log('\n\nüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:');
try {
  const pm2Status = execSync('pm2 status', { encoding: 'utf8' });
  console.log(pm2Status);
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ PM2:', error.message);
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
console.log('\n\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö:');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ fonana
console.log('\nüì¶ –ü—Ä–æ—Ü–µ—Å—Å fonana:');
try {
  const fonanaEnv = execSync('pm2 env 2 | grep -E "NEXTAUTH_SECRET|DATABASE_URL|NODE_ENV" | head -5', { encoding: 'utf8' });
  if (fonanaEnv) {
    console.log(fonanaEnv);
  } else {
    console.log('‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ fonana');
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö fonana:', error.message);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ fonana-ws
console.log('\nüì¶ –ü—Ä–æ—Ü–µ—Å—Å fonana-ws:');
try {
  const wsEnv = execSync('pm2 env 1 | grep -E "NEXTAUTH_SECRET|DATABASE_URL|NODE_ENV" | head -5', { encoding: 'utf8' });
  if (wsEnv) {
    console.log(wsEnv);
  } else {
    console.log('‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ fonana-ws');
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö fonana-ws:', error.message);
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint
console.log('\n\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint:');
try {
  const jwtDebugResponse = execSync('curl -s http://localhost:3000/api/test/jwt-debug', { encoding: 'utf8' });
  const jwtDebug = JSON.parse(jwtDebugResponse);
  
  console.log('JWT Debug Response:');
  console.log(`   - Secret –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${jwtDebug.secretConfigured ? '–¥–∞ ‚úÖ' : '–ù–ï–¢ ‚ùå'}`);
  console.log(`   - –î–ª–∏–Ω–∞ secret: ${jwtDebug.secretLength}`);
  console.log(`   - –ü—Ä–µ—Ñ–∏–∫—Å: ${jwtDebug.secretPrefix}`);
  console.log(`   - –î–µ—Ñ–æ–ª—Ç–Ω—ã–π: ${jwtDebug.isDefaultSecret ? '–î–ê ‚ö†Ô∏è' : '–Ω–µ—Ç'}`);
  console.log(`   - NODE_ENV: ${jwtDebug.nodeEnv}`);
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT endpoint:', error.message);
}

// 6. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞
console.log('\n\nüîë –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞:');
try {
  const tokenResponse = execSync('curl -s -X POST http://localhost:3000/api/auth/wallet -H "Content-Type: application/json" -d \'{"wallet": "DUxkXhMWuo76ofUMtFRZtL8zmVqQnb8twLeB5NcaM4cG"}\'', { encoding: 'utf8' });
  const tokenData = JSON.parse(tokenResponse);
  
  if (tokenData.token) {
    console.log('‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º header –∏ payload
    const [header, payload] = tokenData.token.split('.').slice(0, 2).map(part => 
      JSON.parse(Buffer.from(part, 'base64').toString())
    );
    
    console.log('   - –ê–ª–≥–æ—Ä–∏—Ç–º:', header.alg);
    console.log('   - User ID:', payload.userId);
    console.log('   - Audience:', payload.aud);
    console.log('   - Issuer:', payload.iss);
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', tokenData.error);
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ JWT:', error.message);
}

// 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
console.log('\n\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞:');
try {
  const wsLogs = execSync('pm2 logs fonana-ws --lines 5 --nostream | grep -E "JWT_SECRET|Using default|loaded from"', { encoding: 'utf8' });
  if (wsLogs) {
    console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ WebSocket:');
    console.log(wsLogs);
  }
} catch (error) {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –ª–æ–≥–∏ –ø—É—Å—Ç—ã–µ
}

console.log('\n' + '=' .repeat(50));
console.log('üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê\n'); 