#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function checkSubscriptions() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫...\n')

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.findMany({
      select: {
        id: true,
        nickname: true,
        wallet: true
      }
    })

    console.log('üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.length)
    
    // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const userMap = new Map()
    users.forEach(user => {
      userMap.set(user.nickname, user)
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const subscriptions = await prisma.subscription.findMany({
      include: {
        user: {
          select: { nickname: true }
        },
        creator: {
          select: { nickname: true }
        }
      }
    })

    console.log('\nüìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:')
    subscriptions.forEach(sub => {
      const status = sub.isActive && sub.validUntil > new Date() ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'
      console.log(`  ${sub.user.nickname} ‚Üí ${sub.creator.nickname} (${sub.plan}) ${status}`)
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É Dogwater –Ω–∞ Pal
    const dogwater = userMap.get('Dogwater')
    const pal = userMap.get('Pal')

    if (dogwater && pal) {
      const existingSub = await prisma.subscription.findFirst({
        where: {
          userId: dogwater.id,
          creatorId: pal.id
        }
      })

      if (!existingSub) {
        console.log('\n‚ö†Ô∏è  –ü–æ–¥–ø–∏—Å–∫–∞ Dogwater –Ω–∞ Pal –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–æ–∑–¥–∞–µ–º...')
        
        const validUntil = new Date()
        validUntil.setMonth(validUntil.getMonth() + 1)

        await prisma.subscription.create({
          data: {
            userId: dogwater.id,
            creatorId: pal.id,
            plan: 'basic',
            price: 10,
            validUntil: validUntil,
            isActive: true
          }
        })

        console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞')
      } else {
        console.log(`\n‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ Dogwater –Ω–∞ Pal —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø–ª–∞–Ω: ${existingSub.plan}, –∞–∫—Ç–∏–≤–Ω–∞: ${existingSub.isActive})`)
        
        // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞, –æ–±–Ω–æ–≤–ª—è–µ–º
        if (!existingSub.isActive || existingSub.validUntil < new Date()) {
          const validUntil = new Date()
          validUntil.setMonth(validUntil.getMonth() + 1)
          
          await prisma.subscription.update({
            where: { id: existingSub.id },
            data: {
              isActive: true,
              validUntil: validUntil
            }
          })
          console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞')
        }
      }
    } else {
      if (!dogwater) console.log('\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Dogwater –Ω–µ –Ω–∞–π–¥–µ–Ω')
      if (!pal) console.log('\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Pal –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:')
    const finalSubs = await prisma.subscription.findMany({
      where: {
        isActive: true,
        validUntil: { gte: new Date() }
      },
      include: {
        user: { select: { nickname: true } },
        creator: { select: { nickname: true } }
      }
    })

    finalSubs.forEach(sub => {
      console.log(`  ${sub.user.nickname} ‚Üí ${sub.creator.nickname} (${sub.plan})`)
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkSubscriptions() 