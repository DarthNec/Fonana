const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function checkUnifiedPostCardAccess() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ PostCard...\n')

  try {
    // 1. –ù–∞–π–¥–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å –ø–æ—Å—Ç–∞–º–∏
    const creator = await prisma.user.findFirst({
      where: {
        isCreator: true,
        posts: {
          some: {
            isLocked: true
          }
        }
      },
      include: {
        posts: {
          where: {
            isLocked: true
          },
          take: 5
        }
      }
    })

    if (!creator) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏')
      return
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—å: ${creator.nickname} (${creator.id})`)
    console.log(`   –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: ${creator.posts.length}`)

    // 2. –ü—Ä–æ–≤–µ—Ä–∏–º API endpoint —Å userWallet –∞–≤—Ç–æ—Ä–∞
    console.log('\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ API /api/posts —Å userWallet –∞–≤—Ç–æ—Ä–∞...')
    
    const apiUrl = `http://localhost:3000/api/posts?creatorId=${creator.id}&userWallet=${creator.wallet}`
    console.log(`   URL: ${apiUrl}`)
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ fetch)
    const posts = await prisma.post.findMany({
      where: {
        creatorId: creator.id
      },
      include: {
        creator: {
          select: {
            id: true,
            nickname: true,
            wallet: true
          }
        },
        _count: {
          select: {
            likes: true,
            comments: true
          }
        }
      }
    })

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∞:`)
    for (const post of posts) {
      const isCreatorPost = creator.id === post.creatorId
      const shouldHideContent = post.isLocked && !isCreatorPost
      
      console.log(`\n   üìù "${post.title}":`)
      console.log(`      - isLocked: ${post.isLocked}`)
      console.log(`      - isCreatorPost: ${isCreatorPost} ‚úÖ`)
      console.log(`      - shouldHideContent: ${shouldHideContent}`)
      console.log(`      - –ê–≤—Ç–æ—Ä –≤–∏–¥–∏—Ç —Å–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç: ${!shouldHideContent} ‚úÖ`)
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∏–¥–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
    const otherUser = await prisma.user.findFirst({
      where: {
        id: { not: creator.id },
        wallet: { not: null }
      }
    })

    if (otherUser) {
      console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${otherUser.nickname}`)
      
      for (const post of posts.slice(0, 2)) {
        const isCreatorPost = otherUser.id === post.creatorId
        const hasSubscription = await prisma.subscription.findFirst({
          where: {
            userId: otherUser.id,
            creatorId: creator.id,
            isActive: true,
            paymentStatus: 'COMPLETED'
          }
        })
        
        const shouldHideContent = post.isLocked && !isCreatorPost && !hasSubscription
        
        console.log(`\n   üìù "${post.title}":`)
        console.log(`      - isCreatorPost: ${isCreatorPost}`)
        console.log(`      - hasSubscription: ${!!hasSubscription}`)
        console.log(`      - shouldHideContent: ${shouldHideContent} ‚úÖ`)
      }
    }

    console.log('\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkUnifiedPostCardAccess() 