const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const util = require('util');
const execPromise = util.promisify(exec);

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö —Ö–µ—à-–∏–º–µ–Ω –∫ –Ω–æ–≤—ã–º –∏–º–µ–Ω–∞–º –∏–∑ –ë–î
const avatarMapping = {
  // –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
  // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –ª–æ–≥–æ–≤
  'avatar_1749849782476_o5z14.png': null,
  'avatar_1749862008540_ioayxq.jpeg': null,
  'avatar_1749856123270_9d2h8.jpeg': null,
  'avatar_1749850012325_821dkg.jpeg': null,
  'avatar_1749909348667_bt1g8a.png': null,
};

async function fixAvatars() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏...\n');
  
  const avatarsDir = path.join(process.cwd(), 'public', 'avatars');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const files = fs.readdirSync(avatarsDir);
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ avatars\n`);
    
    // –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å—Ç–∞—Ä—ã–µ (—Ö–µ—à–∏) –∏ –Ω–æ–≤—ã–µ (avatar_*)
    const oldFiles = files.filter(f => !f.startsWith('avatar_'));
    const newFiles = files.filter(f => f.startsWith('avatar_'));
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã (—Ö–µ—à–∏): ${oldFiles.length}`);
    console.log(`   - –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã (avatar_*): ${newFiles.length}`);
    console.log('');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –ë–î –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    const missingFiles = [];
    for (const avatarName of Object.keys(avatarMapping)) {
      const filePath = path.join(avatarsDir, avatarName);
      if (!fs.existsSync(filePath)) {
        missingFiles.push(avatarName);
      }
    }
    
    if (missingFiles.length > 0) {
      console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã (${missingFiles.length}):`);
      missingFiles.forEach(file => console.log(`   - ${file}`));
      console.log('');
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–∏–º–ª–∏–Ω–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è...');
    console.log('   –î–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É\n');
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const placeholderPath = path.join(avatarsDir, 'placeholder.png');
    if (!fs.existsSync(placeholderPath) && oldFiles.length > 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
      const sourceFile = path.join(avatarsDir, oldFiles[0]);
      fs.copyFileSync(sourceFile, placeholderPath);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞: placeholder.png`);
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–∏–º–ª–∏–Ω–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    let created = 0;
    for (const missingFile of missingFiles) {
      const linkPath = path.join(avatarsDir, missingFile);
      if (!fs.existsSync(linkPath) && fs.existsSync(placeholderPath)) {
        try {
          fs.symlinkSync('placeholder.png', linkPath);
          created++;
        } catch (err) {
          // –ï—Å–ª–∏ —Å–∏–º–ª–∏–Ω–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
          fs.copyFileSync(placeholderPath, linkPath);
          created++;
        }
      }
    }
    
    if (created > 0) {
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${created} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤/—Å–∏–º–ª–∏–Ω–∫–æ–≤`);
    }
    
    console.log('\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –û–±–Ω–æ–≤–∏—Ç–µ –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤ —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞');
    console.log('2. –°–æ–∑–¥–∞–π—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –≤ –ë–î');
    console.log('3. –ò–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–ø–∏—Å—è–º –≤ –ë–î');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixAvatars(); 