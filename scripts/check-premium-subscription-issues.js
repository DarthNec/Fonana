const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function checkPremiumSubscriptionIssues() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –ü–†–û–ë–õ–ï–ú –° PREMIUM –ü–û–î–ü–ò–°–ö–ê–ú–ò\n')
  
  try {
    // 1. –ù–∞–π–¥–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å metadata.plan = Premium –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    console.log('1Ô∏è‚É£ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –° –ü–õ–ê–ù–û–ú PREMIUM:')
    const recentTxs = await prisma.transaction.findMany({
      where: {
        type: 'SUBSCRIPTION',
        status: 'CONFIRMED',
        createdAt: { gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
      },
      include: {
        subscription: {
          include: {
            user: { select: { nickname: true } },
            creator: { 
              select: { 
                nickname: true,
                tierSettings: true
              } 
            }
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    })
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≥–¥–µ –ø–ª–∞–Ω –≤ metadata = Premium
    const premiumTxs = recentTxs.filter(tx => {
      if (tx.metadata && typeof tx.metadata === 'object') {
        const metadata = tx.metadata
        return metadata.plan === 'Premium' || metadata.plan === 'premium'
      }
      return false
    })
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${premiumTxs.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ø–ª–∞–Ω–æ–º Premium\n`)
    
    for (const tx of premiumTxs) {
      const sub = tx.subscription
      const metadata = tx.metadata
      
      console.log(`üìå ${sub.user.nickname} ‚Üí ${sub.creator.nickname}:`)
      console.log(`  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${tx.txSignature.slice(0, 20)}...`)
      console.log(`  –î–∞—Ç–∞: ${tx.createdAt.toISOString()}`)
      console.log(`  –°—É–º–º–∞ –æ–ø–ª–∞—á–µ–Ω–∞: ${tx.amount} SOL`)
      console.log(`  –ü–ª–∞–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: "${metadata.plan}"`)
      console.log(`  –ü–ª–∞–Ω –≤ –ø–æ–¥–ø–∏—Å–∫–µ: "${sub.plan}"`)
      
      if (metadata.plan !== sub.plan) {
        console.log(`  ‚ö†Ô∏è  –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï! –ü–ª–∞–Ω –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ "${metadata.plan}", –∞ –≤ –ø–æ–¥–ø–∏—Å–∫–µ "${sub.plan}"`)
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–µ–Ω—ã
      if (sub.creator.tierSettings) {
        const settings = sub.creator.tierSettings
        console.log(`  –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–µ–Ω—ã —Å–æ–∑–¥–∞—Ç–µ–ª—è:`)
        if (settings.basicTier) {
          const basic = typeof settings.basicTier === 'string' ? JSON.parse(settings.basicTier) : settings.basicTier
          console.log(`    Basic: ${basic.price} SOL`)
        }
        if (settings.premiumTier) {
          const premium = typeof settings.premiumTier === 'string' ? JSON.parse(settings.premiumTier) : settings.premiumTier
          console.log(`    Premium: ${premium.price} SOL`)
        }
        if (settings.vipTier) {
          const vip = typeof settings.vipTier === 'string' ? JSON.parse(settings.vipTier) : settings.vipTier
          console.log(`    VIP: ${vip.price} SOL`)
        }
      }
      console.log('')
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–ø–∏—Å–∫–∏ –≥–¥–µ —Ü–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Premium, –Ω–æ –ø–ª–∞–Ω –Ω–µ Premium
    console.log('\n2Ô∏è‚É£ –ü–û–î–ü–ò–°–ö–ò –° –¶–ï–ù–û–ô PREMIUM, –ù–û –î–†–£–ì–ò–ú –ü–õ–ê–ù–û–ú:')
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const allSubs = await prisma.subscription.findMany({
      where: {
        isActive: true,
        paymentStatus: 'COMPLETED',
        price: { gte: 0.1 } // Premium –æ–±—ã—á–Ω–æ >= 0.15
      },
      include: {
        user: { select: { nickname: true } },
        creator: { 
          select: { 
            nickname: true,
            tierSettings: true
          } 
        }
      }
    })
    
    for (const sub of allSubs) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ü–µ–Ω–∞ –ø–ª–∞–Ω—É
      let expectedPlan = null
      
      if (sub.creator.tierSettings) {
        const settings = sub.creator.tierSettings
        const basicTier = settings.basicTier ? (typeof settings.basicTier === 'string' ? JSON.parse(settings.basicTier) : settings.basicTier) : null
        const premiumTier = settings.premiumTier ? (typeof settings.premiumTier === 'string' ? JSON.parse(settings.premiumTier) : settings.premiumTier) : null
        const vipTier = settings.vipTier ? (typeof settings.vipTier === 'string' ? JSON.parse(settings.vipTier) : settings.vipTier) : null
        
        if (basicTier && Math.abs(sub.price - basicTier.price) < 0.001) {
          expectedPlan = 'Basic'
        } else if (premiumTier && Math.abs(sub.price - premiumTier.price) < 0.001) {
          expectedPlan = 'Premium'
        } else if (vipTier && Math.abs(sub.price - vipTier.price) < 0.001) {
          expectedPlan = 'VIP'
        }
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–µ–Ω—ã
        if (Math.abs(sub.price - 0.05) < 0.001) {
          expectedPlan = 'Basic'
        } else if (Math.abs(sub.price - 0.15) < 0.001) {
          expectedPlan = 'Premium'
        } else if (Math.abs(sub.price - 0.35) < 0.001) {
          expectedPlan = 'VIP'
        }
      }
      
      if (expectedPlan && expectedPlan !== sub.plan) {
        console.log(`\n‚ö†Ô∏è  ${sub.user.nickname} ‚Üí ${sub.creator.nickname}:`)
        console.log(`  –¶–µ–Ω–∞: ${sub.price} SOL`)
        console.log(`  –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: "${sub.plan}"`)
        console.log(`  –û–∂–∏–¥–∞–µ–º—ã–π –ø–ª–∞–Ω –ø–æ —Ü–µ–Ω–µ: "${expectedPlan}"`)
        console.log(`  ID –ø–æ–¥–ø–∏—Å–∫–∏: ${sub.id}`)
      }
    }
    
    // 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\n\nüìã –í–´–í–û–î–´:')
    console.log('1. –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
    console.log('2. –ò–ª–∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–æ —Ü–µ–Ω–µ')
    console.log('3. –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –≤ /api/subscriptions/process-payment')
    console.log('4. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–ª–∞–Ω –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkPremiumSubscriptionIssues() 