// –≠–º—É–ª–∏—Ä—É–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
const jwt = require('jsonwebtoken');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–∞–∫ –≤ WebSocket —Å–µ—Ä–≤–µ—Ä–µ
require('dotenv').config({ path: path.join(__dirname, '../.env') });

const JWT_SECRET = process.env.NEXTAUTH_SECRET || 'your-secret-key';
console.log('üîë JWT_SECRET configured:', JWT_SECRET ? `${JWT_SECRET.substring(0, 10)}...` : 'NOT SET');
console.log('üîë Using default key:', JWT_SECRET === 'your-secret-key');

// –ü—Ä–∏–º–µ—Ä —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ª–æ–≥–æ–≤ (–¥–ª–∏–Ω–∞ 297)
// –≠—Ç–æ —Ç–æ–∫–µ–Ω –∫–æ—Ç–æ—Ä—ã–π –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç
const sampleToken = process.argv[2];

if (!sampleToken) {
  console.log('\nUsage: node test-ws-jwt-validation.js <JWT_TOKEN>');
  console.log('\nTesting with generated token...');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  const ENV = {
    NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET || 'rFbhMWHvRfv9AacQlVquu9JnY1jCoioNdpaPfIkAK9U='
  };
  
  const testToken = jwt.sign(
    {
      userId: 'test-user-id',
      wallet: 'test-wallet-address',
      sub: 'test-user-id'
    },
    ENV.NEXTAUTH_SECRET,
    { 
      expiresIn: '30d'
    }
  );
  
  console.log('\nGenerated token:', testToken);
  console.log('Token length:', testToken.length);
  
  // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ –≤ WebSocket
  try {
    const decoded = jwt.verify(testToken, JWT_SECRET);
    console.log('\n‚úÖ Token verified successfully!');
    console.log('Decoded:', decoded);
  } catch (error) {
    console.log('\n‚ùå Verification failed:', error.message);
  }
} else {
  console.log('\nToken to verify:', sampleToken);
  console.log('Token length:', sampleToken.length);
  
  // –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
  try {
    const decoded = jwt.decode(sampleToken);
    console.log('\nDecoded without verification:', decoded);
  } catch (error) {
    console.log('\nFailed to decode:', error.message);
  }
  
  // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å —Å–µ–∫—Ä–µ—Ç–æ–º
  try {
    const decoded = jwt.verify(sampleToken, JWT_SECRET);
    console.log('\n‚úÖ Token verified with WebSocket secret!');
    console.log('Decoded:', decoded);
  } catch (error) {
    console.log('\n‚ùå Verification failed:', error.message);
  }
} 