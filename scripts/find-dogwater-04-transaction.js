const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function findDogwater04Transaction() {
  try {
    console.log('üîç –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é Dogwater –Ω–∞ 0.4 SOL...\n');
    
    // –ù–∞–π–¥–µ–º Dogwater
    const dogwater = await prisma.user.findFirst({ 
      where: { nickname: 'Dogwater' },
      select: { id: true, nickname: true, wallet: true, solanaWallet: true }
    });
    
    if (!dogwater) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Dogwater –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('üë§ Dogwater:');
    console.log('- ID:', dogwater.id);
    console.log('- Wallet:', dogwater.wallet);
    console.log('- Solana Wallet:', dogwater.solanaWallet);
    
    // –ù–∞–π–¥–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç Dogwater
    const allTransactions = await prisma.transaction.findMany({
      where: {
        OR: [
          { fromWallet: dogwater.wallet },
          ...(dogwater.solanaWallet ? [{ fromWallet: dogwater.solanaWallet }] : []),
          { senderId: dogwater.id }
        ]
      },
      orderBy: { createdAt: 'desc' },
      include: {
        subscription: {
          include: {
            creator: {
              select: { nickname: true, wallet: true }
            }
          }
        },
        postPurchase: true
      }
    });
    
    console.log(`\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç Dogwater: ${allTransactions.length}`);
    
    // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ 0.4 SOL
    const transaction04 = allTransactions.find(tx => 
      tx.amount === 0.4 || 
      Math.abs(tx.amount - 0.4) < 0.0001 // —É—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å float
    );
    
    if (transaction04) {
      console.log('\nüéØ –ù–ê–ô–î–ï–ù–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –ù–ê 0.4 SOL:');
      console.log('- ID:', transaction04.id);
      console.log('- –¢–∏–ø:', transaction04.type);
      console.log('- –°—É–º–º–∞:', transaction04.amount, 'SOL');
      console.log('- –û—Ç –∫–æ—à–µ–ª—å–∫–∞:', transaction04.fromWallet);
      console.log('- –ù–∞ –∫–æ—à–µ–ª–µ–∫:', transaction04.toWallet);
      console.log('- –°—Ç–∞—Ç—É—Å:', transaction04.status);
      console.log('- –î–∞—Ç–∞:', transaction04.createdAt);
      console.log('- –ü–æ–¥–ø–∏—Å—å:', transaction04.txSignature);
      
      if (transaction04.subscription) {
        console.log('\nüìã –°–≤—è–∑–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:');
        console.log('- ID:', transaction04.subscription.id);
        console.log('- –ü–ª–∞–Ω:', transaction04.subscription.plan);
        console.log('- –°–æ–∑–¥–∞—Ç–µ–ª—å:', transaction04.subscription.creator?.nickname);
        console.log('- –ö–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞—Ç–µ–ª—è:', transaction04.subscription.creator?.wallet);
      }
      
      if (transaction04.metadata) {
        console.log('\nüìù –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', JSON.stringify(transaction04.metadata, null, 2));
      }
    } else {
      console.log('\n‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ 0.4 SOL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      
      // –ü–æ–∫–∞–∂–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–æ–ª—å—à–µ 0.3 SOL
      const largeTransactions = allTransactions.filter(tx => tx.amount >= 0.3);
      console.log(`\nüí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ >= 0.3 SOL (${largeTransactions.length}):`);
      
      largeTransactions.forEach((tx, index) => {
        console.log(`\n${index + 1}. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${tx.id}:`);
        console.log('   - –¢–∏–ø:', tx.type);
        console.log('   - –°—É–º–º–∞:', tx.amount, 'SOL');
        console.log('   - –ù–∞ –∫–æ—à–µ–ª–µ–∫:', tx.toWallet);
        console.log('   - –°—Ç–∞—Ç—É—Å:', tx.status);
        console.log('   - –î–∞—Ç–∞:', tx.createdAt);
        if (tx.subscription?.creator) {
          console.log('   - –°–æ–∑–¥–∞—Ç–µ–ª—å:', tx.subscription.creator.nickname);
        }
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Ü–µ–Ω–æ–π 0.4 –∏–ª–∏ null
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Ü–µ–Ω–æ–π 0.4 SOL –∏–ª–∏ null:');
    
    const problematicSubscriptions = await prisma.subscription.findMany({
      where: {
        userId: dogwater.id,
        OR: [
          { price: 0.4 },
          { price: null },
          { price: 0 }
        ]
      },
      include: {
        creator: {
          select: { nickname: true }
        }
      }
    });
    
    problematicSubscriptions.forEach((sub, index) => {
      console.log(`\n${index + 1}. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${sub.creator.nickname}:`);
      console.log('   - –ü–ª–∞–Ω:', sub.plan);
      console.log('   - –¶–µ–Ω–∞:', sub.price, 'SOL');
      console.log('   - –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:', sub.paymentStatus);
      console.log('   - –ê–∫—Ç–∏–≤–Ω–∞:', sub.isActive);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

findDogwater04Transaction(); 