const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
}

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`)
}

async function diagnoseReferralSystem() {
  try {
    log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Fonana\n', 'cyan')
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
    log('1. –ê–Ω–∞–ª–∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π:', 'blue')
    const usersWithReferrers = await prisma.user.findMany({
      where: { referrerId: { not: null } },
      include: {
        referrer: {
          select: { nickname: true, fullName: true }
        }
      },
      take: 10,
      orderBy: { createdAt: 'desc' }
    })
    
    log(`   –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: ${usersWithReferrers.length}`, 'green')
    
    if (usersWithReferrers.length > 0) {
      log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', 'yellow')
      usersWithReferrers.forEach(user => {
        log(`   - ${user.nickname || 'No nickname'} ‚Üí —Ä–µ—Ñ–µ—Ä–µ—Ä: @${user.referrer?.nickname || 'Unknown'}`)
      })
    }
    
    // 2. –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä—ã
    log('\n2. –¢–æ–ø-5 —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:', 'blue')
    const topReferrers = await prisma.user.findMany({
      where: {
        referrals: {
          some: {}
        }
      },
      select: {
        nickname: true,
        fullName: true,
        _count: {
          select: { referrals: true }
        }
      },
      orderBy: {
        referrals: {
          _count: 'desc'
        }
      },
      take: 5
    })
    
    topReferrers.forEach((referrer, index) => {
      log(`   ${index + 1}. @${referrer.nickname} - ${referrer._count.referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`, 'green')
    })
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏
    log('\n3. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:', 'blue')
    const sevenDaysAgo = new Date()
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7)
    
    const referralTransactions = await prisma.transaction.findMany({
      where: {
        referrerFee: { gt: 0 },
        createdAt: { gte: sevenDaysAgo }
      },
      orderBy: { createdAt: 'desc' },
      take: 5
    })
    
    if (referralTransactions.length > 0) {
      log(`   –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏: ${referralTransactions.length}`, 'green')
      let totalReferralFees = 0
      referralTransactions.forEach(tx => {
        totalReferralFees += tx.referrerFee || 0
        log(`   - ${tx.createdAt.toLocaleDateString()} | –ö–æ–º–∏—Å—Å–∏—è: ${tx.referrerFee?.toFixed(4)} SOL | Wallet: ${tx.referrerWallet?.slice(0, 8)}...`)
      })
      log(`   –û–±—â–∞—è —Å—É–º–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: ${totalReferralFees.toFixed(4)} SOL`, 'yellow')
    } else {
      log('   –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'yellow')
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–∏–∫–∞–º–∏
    log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤:', 'blue')
    const suspiciousNicknames = ['404', '500', 'feed', 'error', 'null', 'undefined']
    
    for (const nickname of suspiciousNicknames) {
      const user = await prisma.user.findFirst({
        where: { 
          nickname: {
            equals: nickname,
            mode: 'insensitive'
          }
        }
      })
      
      if (user) {
        log(`   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–Ω–µ–π–º–æ–º "${nickname}"!`, 'red')
        log(`      ID: ${user.id}, Created: ${user.createdAt.toLocaleDateString()}`)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
        const referralCount = await prisma.user.count({
          where: { referrerId: user.id }
        })
        
        if (referralCount > 0) {
          log(`      –í–ù–ò–ú–ê–ù–ò–ï: –£ –Ω–µ–≥–æ –µ—Å—Ç—å ${referralCount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!`, 'red')
        }
      }
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
    log('\n5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –Ω–∏–∫–Ω–µ–π–º–æ–≤ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏:', 'blue')
    const usersWithoutNicknames = await prisma.user.findMany({
      where: {
        nickname: null,
        referrals: {
          some: {}
        }
      },
      select: {
        id: true,
        wallet: true,
        _count: {
          select: { referrals: true }
        }
      }
    })
    
    if (usersWithoutNicknames.length > 0) {
      log(`   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${usersWithoutNicknames.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏!`, 'red')
      usersWithoutNicknames.forEach(user => {
        log(`   - Wallet: ${user.wallet?.slice(0, 8)}... | –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user._count.referrals}`)
      })
    } else {
      log('   ‚úÖ –í—Å–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—ã –∏–º–µ—é—Ç –Ω–∏–∫–Ω–µ–π–º—ã', 'green')
    }
    
    // 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
    log('\n6. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', 'blue')
    const totalUsers = await prisma.user.count()
    const usersWithReferrer = await prisma.user.count({
      where: { referrerId: { not: null } }
    })
    const referrers = await prisma.user.count({
      where: {
        referrals: {
          some: {}
        }
      }
    })
    
    log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`)
    log(`   –ü—Ä–∏—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: ${usersWithReferrer} (${((usersWithReferrer/totalUsers)*100).toFixed(1)}%)`)
    log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤: ${referrers}`)
    
    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∏–∫–Ω–µ–π–º–æ–≤ —Å —Ä–∞–∑–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
    log('\n7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∏–∫–Ω–µ–π–º–æ–≤:', 'blue')
    const allNicknames = await prisma.user.findMany({
      where: { nickname: { not: null } },
      select: { nickname: true }
    })
    
    const nicknameMap = new Map()
    allNicknames.forEach(user => {
      if (user.nickname) {
        const lower = user.nickname.toLowerCase()
        if (!nicknameMap.has(lower)) {
          nicknameMap.set(lower, [])
        }
        nicknameMap.get(lower).push(user.nickname)
      }
    })
    
    let duplicatesFound = false
    nicknameMap.forEach((nicknames, lower) => {
      if (nicknames.length > 1) {
        duplicatesFound = true
        log(`   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è "${lower}": ${nicknames.join(', ')}`, 'red')
      }
    })
    
    if (!duplicatesFound) {
      log('   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'green')
    }
    
    log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'green')
    
  } catch (error) {
    log(`\n‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'red')
    console.error(error)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
diagnoseReferralSystem() 