const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkPostsImages() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–æ—Å—Ç–∞—Ö...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    const posts = await prisma.post.findMany({
      where: {
        type: 'image'
      },
      select: {
        id: true,
        title: true,
        mediaUrl: true,
        content: true,
        thumbnail: true,
        createdAt: true,
        creator: {
          select: {
            nickname: true,
            fullName: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${posts.length}\n`);
    
    posts.forEach((post, index) => {
      console.log(`üìù –ü–æ—Å—Ç ${index + 1}:`);
      console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${post.title}`);
      console.log(`   –ê–≤—Ç–æ—Ä: ${post.creator.nickname} (${post.creator.fullName || 'No name'})`);
      console.log(`   –î–∞—Ç–∞: ${post.createdAt.toLocaleString()}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–µ –ø–æ–ª–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (post.mediaUrl) {
        console.log(`   mediaUrl: ${post.mediaUrl}`);
      }
      if (post.thumbnail) {
        console.log(`   thumbnail: ${post.thumbnail}`);
      }
      if (post.content) {
        console.log(`   content: ${post.content}`);
      }
      if (!post.mediaUrl && !post.thumbnail) {
        console.log(`   ‚ö†Ô∏è  –ù–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!`);
      }
      
      console.log('');
    });
    
    // –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–µ–π
    console.log('üìä –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º:');
    const imagePaths = posts
      .map(p => p.mediaUrl || p.thumbnail)
      .filter(Boolean);
    
    const pathPatterns = {};
    imagePaths.forEach(path => {
      const pattern = path.startsWith('/') ? '–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å' : '–ü–æ–ª–Ω—ã–π URL';
      pathPatterns[pattern] = (pathPatterns[pattern] || 0) + 1;
      
      if (path.startsWith('/')) {
        const parts = path.split('/');
        console.log(`   ${path} ‚Üí –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: /${parts[1]}/${parts[2] || ''}`);
      }
    });
    
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    Object.entries(pathPatterns).forEach(([pattern, count]) => {
      console.log(`   ${pattern}: ${count}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkPostsImages(); 