#!/usr/bin/env node

const { execSync } = require('child_process');

console.log('üîç –£–ì–õ–£–ë–õ–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–¶–ï–°–°–ê FONANA\n');
console.log('=' .repeat(50));

// 1. –ü–æ–ª—É—á–∞–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞ fonana
console.log('\nüì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ:');
try {
  const pm2List = execSync('pm2 jlist', { encoding: 'utf8' });
  const processes = JSON.parse(pm2List);
  const fonanaProcess = processes.find(p => p.name === 'fonana');
  
  if (fonanaProcess) {
    console.log(`   - PID: ${fonanaProcess.pid}`);
    console.log(`   - Uptime: ${fonanaProcess.pm2_env.pm_uptime}`);
    console.log(`   - Restart count: ${fonanaProcess.pm2_env.restart_time}`);
    console.log(`   - Script: ${fonanaProcess.pm2_env.pm_exec_path}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ /proc
    console.log('\nüîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ /proc:');
    try {
      const envVars = execSync(`cat /proc/${fonanaProcess.pid}/environ | tr '\\0' '\\n' | grep -E 'NEXTAUTH_SECRET|DATABASE_URL|NODE_ENV' | head -5`, { encoding: 'utf8' });
      
      if (envVars) {
        const lines = envVars.split('\n').filter(line => line);
        lines.forEach(line => {
          const [key, value] = line.split('=');
          if (key === 'NEXTAUTH_SECRET') {
            console.log(`   - ${key}: ${value ? `–Ω–∞—Å—Ç—Ä–æ–µ–Ω (–¥–ª–∏–Ω–∞: ${value.length})` : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
          } else {
            console.log(`   - ${key}: ${value || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
          }
        });
      } else {
        console.log('   ‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ /proc');
      }
    } catch (error) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è /proc:', error.message);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞
    console.log('\nüöÄ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞:');
    try {
      const cmdline = execSync(`cat /proc/${fonanaProcess.pid}/cmdline | tr '\\0' ' '`, { encoding: 'utf8' });
      console.log(`   ${cmdline}`);
    } catch (error) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cmdline:', error.message);
    }
  } else {
    console.log('‚ùå –ü—Ä–æ—Ü–µ—Å—Å fonana –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PM2');
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ:', error.message);
}

// 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º start-production.js
console.log('\n\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ start-production.js:');
try {
  const startScript = execSync('cat /var/www/Fonana/start-production.js | grep -E "dotenv|NEXTAUTH_SECRET|require" | head -10', { encoding: 'utf8' });
  console.log(startScript);
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è start-production.js:', error.message);
}

// 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å next
console.log('\n\nüéØ –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ Next.js:');
try {
  const nextProcesses = execSync('ps aux | grep "next start" | grep -v grep', { encoding: 'utf8' });
  const lines = nextProcesses.split('\n').filter(line => line);
  
  if (lines.length > 0) {
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã Next.js:');
    lines.forEach(line => {
      const parts = line.split(/\s+/);
      const pid = parts[1];
      console.log(`\n   PID: ${pid}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
      try {
        const hasSecret = execSync(`strings /proc/${pid}/environ | grep NEXTAUTH_SECRET`, { encoding: 'utf8' }).trim();
        console.log(`   - NEXTAUTH_SECRET: ${hasSecret ? '–ï–°–¢–¨ ‚úÖ' : '–ù–ï–¢ ‚ùå'}`);
      } catch (err) {
        console.log('   - NEXTAUTH_SECRET: –ù–ï–¢ ‚ùå');
      }
    });
  } else {
    console.log('‚ùå –ü—Ä–æ—Ü–µ—Å—Å—ã Next.js –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Next.js:', error.message);
}

// 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ next —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
console.log('\n\nüß™ –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:');
try {
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç
  const testScript = `
const secret = process.env.NEXTAUTH_SECRET;
console.log('NEXTAUTH_SECRET loaded:', !!secret);
console.log('Length:', secret ? secret.length : 0);
console.log('First 10 chars:', secret ? secret.substring(0, 10) : 'not-set');
`;
  
  execSync(`echo '${testScript}' > /tmp/test-env.js`, { encoding: 'utf8' });
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å dotenv
  console.log('\n–ó–∞–ø—É—Å–∫ —Å dotenv:');
  const withDotenv = execSync('cd /var/www/Fonana && node -r dotenv/config /tmp/test-env.js', { encoding: 'utf8' });
  console.log(withDotenv);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ dotenv
  console.log('–ó–∞–ø—É—Å–∫ –ë–ï–ó dotenv:');
  const withoutDotenv = execSync('cd /var/www/Fonana && node /tmp/test-env.js', { encoding: 'utf8' });
  console.log(withoutDotenv);
  
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
}

console.log('\n' + '=' .repeat(50));
console.log('üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê\n'); 