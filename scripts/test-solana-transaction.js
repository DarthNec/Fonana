const { Connection, PublicKey, ComputeBudgetProgram } = require('@solana/web3.js')

const RPC_URL = 'https://tame-smart-panorama.solana-mainnet.quiknode.pro/0e70fc875702b126bf8b93cdcd626680e9c48894/'
const PLATFORM_WALLET = 'npzAZaN9fDMgLV63b3kv3FF8cLSd8dQSLxyMXASA5T4'

async function testConnection() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana...\n')
  
  try {
    const connection = new Connection(RPC_URL, {
      commitment: 'confirmed',
      confirmTransactionInitialTimeout: 120000, // 2 –º–∏–Ω—É—Ç—ã
      disableRetryOnRateLimit: false
    })
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RPC...')
    const slot = await connection.getSlot()
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω! –¢–µ–∫—É—â–∏–π —Å–ª–æ—Ç: ${slot}`)
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
    console.log('\n2. –í–µ—Ä—Å–∏—è Solana...')
    const version = await connection.getVersion()
    console.log(`‚úÖ –í–µ—Ä—Å–∏—è: ${version['solana-core']}`)
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    console.log('\n3. –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã...')
    const platformPubkey = new PublicKey(PLATFORM_WALLET)
    const balance = await connection.getBalance(platformPubkey)
    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å: ${balance / 1e9} SOL`)
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π
    console.log('\n4. –¢–µ–∫—É—â–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏...')
    const fees = await connection.getRecentPrioritizationFees()
    if (fees && fees.length > 0) {
      const nonZeroFees = fees.filter(f => f.prioritizationFee > 0)
      if (nonZeroFees.length > 0) {
        const feeValues = nonZeroFees.map(f => f.prioritizationFee).sort((a, b) => a - b)
        console.log(`‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: ${feeValues[0]} microlamports`)
        console.log(`   –ú–µ–¥–∏–∞–Ω–∞: ${feeValues[Math.floor(feeValues.length / 2)]} microlamports`)
        console.log(`   90-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: ${feeValues[Math.floor(feeValues.length * 0.9)]} microlamports`)
        console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: ${feeValues[feeValues.length - 1]} microlamports`)
      }
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ blockhash
    console.log('\n5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ blockhash...')
    const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash('confirmed')
    console.log(`‚úÖ Blockhash: ${blockhash}`)
    console.log(`   –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ –±–ª–æ–∫–∞: ${lastValidBlockHeight}`)
    
    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–µ–Ω—Ç—ã
    console.log('\n6. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–Ω—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞...')
    const minRent = await connection.getMinimumBalanceForRentExemption(0)
    console.log(`‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–Ω—Ç–∞: ${minRent / 1e9} SOL`)
    
    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ RPC
    console.log('\n7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ RPC...')
    const start = Date.now()
    await connection.getSlot()
    const latency = Date.now() - start
    console.log(`‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞: ${latency}ms`)
    
    // 8. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')
    console.log('- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é >= 600000 microlamports')
    console.log('- –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–π—Ç–µ —Å–≤–µ–∂–∏–π blockhash –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π')
    console.log('- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ retry –ª–æ–≥–∏–∫—É (3 –ø–æ–ø—ã—Ç–∫–∏)')
    console.log('- –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ä–µ–Ω—Ç—É –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤')
    console.log('- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ confirmTransaction —Å blockhash –∏ lastValidBlockHeight')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
  }
}

testConnection() 