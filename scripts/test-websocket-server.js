#!/usr/bin/env node

const WebSocket = require('ws');
const jwt = require('jsonwebtoken');
const fs = require('fs');
const path = require('path');

// Load .env file
const envPath = path.join(__dirname, '..', '.env');
const envContent = fs.readFileSync(envPath, 'utf-8');
const envVars = {};

envContent.split('\n').forEach(line => {
  if (line && !line.startsWith('#')) {
    const [key, ...valueParts] = line.split('=');
    if (key && valueParts.length > 0) {
      envVars[key.trim()] = valueParts.join('=').trim();
    }
  }
});

const JWT_SECRET = envVars.NEXTAUTH_SECRET;
const WS_URL = 'ws://localhost:3002';  // Using localhost from server

console.log('\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WEBSOCKET –° –°–ï–†–í–ï–†–ê');
console.log('=====================================\n');

// Test 1: Valid JWT token
async function testValidConnection() {
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º JWT —Ç–æ–∫–µ–Ω–æ–º...');
  
  const validToken = jwt.sign(
    {
      userId: 'cmcceumg7001iyjleslvczux6',
      wallet: 'npzAZaN9fDMgLV63b3kv3FF8cLSd8dQSLxyMXASA5T4',
      sub: 'cmcceumg7001iyjleslvczux6'
    },
    JWT_SECRET,
    { expiresIn: '30d' }
  );

  const ws = new WebSocket(WS_URL, {
    headers: {
      'Authorization': `Bearer ${validToken}`
    }
  });

  return new Promise((resolve) => {
    let messageCount = 0;
    let connected = false;

    ws.on('open', () => {
      connected = true;
      console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
      
      // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
      ws.send(JSON.stringify({
        type: 'subscribe',
        channel: 'notifications'
      }));
    });

    ws.on('message', (data) => {
      messageCount++;
      const message = JSON.parse(data);
      console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ ${messageCount}:`, JSON.stringify(message));
      
      if (message.type === 'subscribed') {
        console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
      }
      
      if (messageCount >= 1) {
        console.log('‚úÖ Real-time –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç\n');
        ws.close();
      }
    });

    ws.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
      resolve(false);
    });

    ws.on('close', () => {
      console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
      resolve(connected);
    });

    // Timeout –ø–æ—Å–ª–µ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      ws.close();
      resolve(connected);
    }, 5000);
  });
}

// Test 2: Invalid JWT token
async function testInvalidConnection() {
  console.log('2Ô∏è‚É£ –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º JWT —Ç–æ–∫–µ–Ω–æ–º...');
  
  const invalidToken = 'invalid.jwt.token';

  const ws = new WebSocket(WS_URL, {
    headers: {
      'Authorization': `Bearer ${invalidToken}`
    }
  });

  return new Promise((resolve) => {
    let wasRejected = false;
    
    ws.on('open', () => {
      // WebSocket –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å—Å—è –Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
      console.log('‚è≥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å, –æ–∂–∏–¥–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è —Å –æ—à–∏–±–∫–æ–π...');
    });

    ws.on('error', (error) => {
      wasRejected = true;
      console.log('‚úÖ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–æ–∂–∏–¥–∞–µ–º–æ):', error.message);
    });

    ws.on('close', (code, reason) => {
      if (code === 1008) {
        console.log(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å –∫–æ–¥–æ–º ${code}: ${reason || 'Unauthorized'}\n`);
        resolve(true);
      } else if (wasRejected) {
        console.log(`‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ\n`);
        resolve(true);
      } else {
        console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –∫–æ–¥ ${code}\n`);
        resolve(false);
      }
    });

    // Timeout
    setTimeout(() => {
      resolve(wasRejected || false);
    }, 3000);
  });
}

// Test 3: No JWT token
async function testNoToken() {
  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –±–µ–∑ JWT —Ç–æ–∫–µ–Ω–∞...');
  
  const ws = new WebSocket(WS_URL);

  return new Promise((resolve) => {
    let wasRejected = false;
    
    ws.on('open', () => {
      // WebSocket –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å—Å—è –Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
      console.log('‚è≥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å, –æ–∂–∏–¥–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è —Å –æ—à–∏–±–∫–æ–π...');
    });

    ws.on('error', (error) => {
      wasRejected = true;
      console.log('‚úÖ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–æ–∂–∏–¥–∞–µ–º–æ):', error.message);
    });

    ws.on('close', (code, reason) => {
      if (code === 1008) {
        console.log(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å –∫–æ–¥–æ–º ${code}: ${reason || 'Unauthorized'}\n`);
        resolve(true);
      } else if (wasRejected) {
        console.log(`‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ\n`);
        resolve(true);
      } else {
        console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –∫–æ–¥ ${code}\n`);
        resolve(false);
      }
    });

    // Timeout
    setTimeout(() => {
      resolve(wasRejected || false);
    }, 3000);
  });
}

// Check WebSocket server logs
async function checkLogs() {
  console.log('4Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ WebSocket —Å–µ—Ä–≤–µ—Ä–∞:');
  const { exec } = require('child_process');
  
  return new Promise((resolve) => {
    exec('pm2 logs fonana-ws --lines 10 --nostream', (error, stdout, stderr) => {
      if (stdout) {
        console.log(stdout);
      }
      resolve();
    });
  });
}

// Run tests
async function runTests() {
  console.log('üîë JWT Secret –∑–∞–≥—Ä—É–∂–µ–Ω:', JWT_SECRET ? '–î–ê' : '–ù–ï–¢');
  console.log('üåê WebSocket URL:', WS_URL);
  console.log('');

  const test1 = await testValidConnection();
  const test2 = await testInvalidConnection();
  const test3 = await testNoToken();
  
  await checkLogs();

  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('==========================');
  console.log(`1. –í–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω: ${test1 ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
  console.log(`2. –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω: ${test2 ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
  console.log(`3. –ë–µ–∑ —Ç–æ–∫–µ–Ω–∞: ${test3 ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
  
  const allPassed = test1 && test2 && test3;
  console.log(`\n${allPassed ? '‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!' : '‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!'}`);
  
  if (allPassed) {
    console.log('\n‚ú® WebSocket —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω:');
    console.log('- JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('- –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è');
    console.log('- Real-time —Å–æ–±—ã—Ç–∏—è –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è');
  }
  
  process.exit(allPassed ? 0 : 1);
}

runTests().catch(console.error); 