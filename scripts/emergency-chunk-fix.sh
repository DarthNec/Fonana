#!/bin/bash

echo "üö® EMERGENCY CHUNK LOAD ERROR FIX"
echo "=================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${YELLOW}üìç Step 1: Checking current status...${NC}"

cd /var/www/Fonana

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
if [ -d ".next/static/chunks" ]; then
    SOURCE_COUNT=$(ls -1 .next/static/chunks/ | wc -l)
    echo -e "${GREEN}‚úÖ Source chunks found: $SOURCE_COUNT files${NC}"
else
    echo -e "${RED}‚ùå Source chunks directory not found!${NC}"
    exit 1
fi

if [ -d ".next/standalone/.next/static/chunks" ]; then
    TARGET_COUNT=$(ls -1 .next/standalone/.next/static/chunks/ | wc -l)
    echo -e "${YELLOW}‚ö†Ô∏è Target chunks already exist: $TARGET_COUNT files${NC}"
else
    echo -e "${BLUE}üìÅ Target chunks directory missing - will create${NC}"
fi

echo -e "${YELLOW}üìç Step 2: Creating target directory...${NC}"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è chunks –≤ standalone
mkdir -p .next/standalone/.next/static/chunks
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Target directory created${NC}"
else
    echo -e "${RED}‚ùå Failed to create target directory${NC}"
    exit 1
fi

echo -e "${YELLOW}üìç Step 3: Copying chunks...${NC}"

# –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ chunks
cp -r .next/static/chunks/* .next/standalone/.next/static/chunks/
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Chunks copied successfully${NC}"
else
    echo -e "${RED}‚ùå Failed to copy chunks${NC}"
    exit 1
fi

echo -e "${YELLOW}üìç Step 4: Verifying copy...${NC}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
COPIED_COUNT=$(ls -1 .next/standalone/.next/static/chunks/ | wc -l)
echo -e "${BLUE}Copied chunks count: $COPIED_COUNT${NC}"

if [ "$SOURCE_COUNT" -eq "$COPIED_COUNT" ]; then
    echo -e "${GREEN}‚úÖ All chunks copied successfully${NC}"
else
    echo -e "${RED}‚ùå Chunk count mismatch! Source: $SOURCE_COUNT, Copied: $COPIED_COUNT${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π chunk
PROBLEM_CHUNK="9487-fab326537be7215a.js"
if [ -f ".next/standalone/.next/static/chunks/$PROBLEM_CHUNK" ]; then
    SIZE=$(ls -lh ".next/standalone/.next/static/chunks/$PROBLEM_CHUNK" | awk '{print $5}')
    echo -e "${GREEN}‚úÖ Problem chunk $PROBLEM_CHUNK copied ($SIZE)${NC}"
else
    echo -e "${RED}‚ùå Problem chunk $PROBLEM_CHUNK NOT found!${NC}"
fi

echo -e "${YELLOW}üìç Step 5: Setting permissions...${NC}"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
chmod -R 644 .next/standalone/.next/static/chunks/
chown -R root:root .next/standalone/.next/static/chunks/
echo -e "${GREEN}‚úÖ Permissions set${NC}"

echo -e "${YELLOW}üìç Step 6: Testing HTTP access...${NC}"

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ HTTP
echo -e "${BLUE}Testing chunk availability...${NC}"
TEST_URL="https://fonana.me/_next/static/chunks/$PROBLEM_CHUNK"
RESPONSE=$(curl -s -o /dev/null -w "%{http_code}:%{content_type}" "$TEST_URL")
HTTP_CODE=$(echo "$RESPONSE" | cut -d':' -f1)
CONTENT_TYPE=$(echo "$RESPONSE" | cut -d':' -f2)

if [ "$HTTP_CODE" = "200" ]; then
    echo -e "${GREEN}‚úÖ HTTP Test: $TEST_URL${NC}"
    echo -e "${GREEN}   Status: $HTTP_CODE, Content-Type: $CONTENT_TYPE${NC}"
else
    echo -e "${RED}‚ùå HTTP Test: $TEST_URL${NC}"
    echo -e "${RED}   Status: $HTTP_CODE, Content-Type: $CONTENT_TYPE${NC}"
    echo -e "${YELLOW}   This might be normal - PM2 needs restart${NC}"
fi

echo -e "${YELLOW}üìç Step 7: Restarting PM2...${NC}"

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º PM2 –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è static file routing
pm2 restart fonana-app
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ PM2 restarted${NC}"
else
    echo -e "${RED}‚ùå PM2 restart failed${NC}"
    exit 1
fi

echo -e "${YELLOW}üìç Step 8: Final verification...${NC}"

# –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–Ω–æ–≤–∞
sleep 3

FINAL_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}:%{content_type}" "$TEST_URL")
FINAL_HTTP_CODE=$(echo "$FINAL_RESPONSE" | cut -d':' -f1)
FINAL_CONTENT_TYPE=$(echo "$FINAL_RESPONSE" | cut -d':' -f2)

echo -e "${BLUE}Final HTTP test results:${NC}"
echo -e "URL: $TEST_URL"
echo -e "Status: $FINAL_HTTP_CODE"
echo -e "Content-Type: $FINAL_CONTENT_TYPE"

if [ "$FINAL_HTTP_CODE" = "200" ] && [[ "$FINAL_CONTENT_TYPE" == *"javascript"* ]]; then
    echo -e "${GREEN}üéâ SUCCESS! Chunk load error should be fixed!${NC}"
    echo -e "${GREEN}‚úÖ Status: $FINAL_HTTP_CODE${NC}"
    echo -e "${GREEN}‚úÖ Content-Type: $FINAL_CONTENT_TYPE${NC}"
elif [ "$FINAL_HTTP_CODE" = "200" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è PARTIAL SUCCESS: File loads but content-type might be wrong${NC}"
    echo -e "${YELLOW}   Status: $FINAL_HTTP_CODE${NC}"
    echo -e "${YELLOW}   Content-Type: $FINAL_CONTENT_TYPE${NC}"
    echo -e "${YELLOW}   This should still fix the ChunkLoadError${NC}"
else
    echo -e "${RED}‚ùå FAILED: File still not accessible${NC}"
    echo -e "${RED}   Status: $FINAL_HTTP_CODE${NC}"
    echo -e "${RED}   Content-Type: $FINAL_CONTENT_TYPE${NC}"
    echo -e "${YELLOW}   May need Nginx configuration or additional troubleshooting${NC}"
fi

echo -e "${BLUE}üìä Summary:${NC}"
echo -e "- Source chunks: $SOURCE_COUNT files"
echo -e "- Copied chunks: $COPIED_COUNT files"
echo -e "- Final HTTP status: $FINAL_HTTP_CODE"
echo -e "- Final content-type: $FINAL_CONTENT_TYPE"

echo ""
echo -e "${GREEN}üö® EMERGENCY FIX COMPLETED!${NC}"
echo "=================================="
echo -e "${BLUE}Next steps:${NC}"
echo "1. Test website - click on placeholder images"
echo "2. Check browser console for ChunkLoadError"
echo "3. If still issues, may need Nginx configuration"
echo ""
echo -e "${YELLOW}For permanent fix, update build process to copy chunks automatically${NC}" 