const {
  Connection,
  PublicKey,
  Transaction,
  SystemProgram,
  sendAndConfirmTransaction,
  Keypair,
  LAMPORTS_PER_SOL
} = require('@solana/web3.js');

const QUICKNODE_RPC = 'https://tame-smart-panorama.solana-mainnet.quiknode.pro/0e70fc875702b126bf8b93cdcd626680e9c48894/';
const PLATFORM_WALLET = 'npzAZaN9fDMgLV63b3kv3FF8cLSd8dQSLxyMXASA5T4';

async function testTransaction() {
  console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...\n');
  
  try {
    const connection = new Connection(QUICKNODE_RPC, {
      commitment: 'confirmed',
      confirmTransactionInitialTimeout: 60000
    });
    
    console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC:', QUICKNODE_RPC);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const version = await connection.getVersion();
    console.log('‚úÖ –í–µ—Ä—Å–∏—è Solana:', version['solana-core']);
    
    // –ü–æ–ª—É—á–∞–µ–º blockhash
    console.log('\nüì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ blockhash...');
    const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash('confirmed');
    console.log('‚úÖ Blockhash:', blockhash);
    console.log('‚úÖ Last valid block height:', lastValidBlockHeight);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    const platformPubkey = new PublicKey(PLATFORM_WALLET);
    const balance = await connection.getBalance(platformPubkey);
    console.log('\nüí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', balance / LAMPORTS_PER_SOL, 'SOL');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)
    console.log('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    const transaction = new Transaction();
    transaction.recentBlockhash = blockhash;
    transaction.lastValidBlockHeight = lastValidBlockHeight;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ 0 SOL —Å–∞–º–æ–º—É —Å–µ–±–µ)
    transaction.add(
      SystemProgram.transfer({
        fromPubkey: platformPubkey,
        toPubkey: platformPubkey,
        lamports: 0
      })
    );
    
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞');
    console.log('   - Recent blockhash:', transaction.recentBlockhash);
    console.log('   - Last valid block height:', transaction.lastValidBlockHeight);
    console.log('   - Instructions:', transaction.instructions.length);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    console.log('\nüîç –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:');
    console.log('   - preflightCommitment: "confirmed"');
    console.log('   - skipPreflight: false');
    console.log('   - maxRetries: 3');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –∫–æ–º–∏—Å—Å–∏—é
    const fees = await connection.getRecentPrioritizationFees();
    console.log('\nüí∏ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏:');
    if (fees && fees.length > 0) {
      const avgFee = fees.reduce((sum, f) => sum + f.prioritizationFee, 0) / fees.length;
      console.log('   - –°—Ä–µ–¥–Ω—è—è –∫–æ–º–∏—Å—Å–∏—è:', avgFee, 'microlamports');
      console.log('   - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è:', Math.min(...fees.map(f => f.prioritizationFee)));
      console.log('   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è:', Math.max(...fees.map(f => f.prioritizationFee)));
    }
    
    console.log('\n‚ú® –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.stack) {
      console.error('\n–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:', error.stack);
    }
  }
}

testTransaction(); 