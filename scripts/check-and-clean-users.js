const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkAndCleanUsers() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const allUsers = await prisma.user.findMany({
      select: {
        id: true,
        nickname: true,
        fullName: true,
        wallet: true,
        createdAt: true,
        _count: {
          select: {
            posts: true,
            follows: true,
            followers: true,
            comments: true,
            likes: true
          }
        }
      }
    });
    
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers.length}\n`);
    
    // –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    const realUsers = ['EasySloth', 'FloorDecor', 'CryptoBob', 'Dogwater', 'fonanadev'];
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏ —Ç–µ—Ö, –∫–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    const usersToKeep = [];
    const usersToDelete = [];
    
    allUsers.forEach(user => {
      const userInfo = {
        id: user.id,
        nickname: user.nickname,
        fullName: user.fullName,
        wallet: user.wallet,
        posts: user._count.posts,
        following: user._count.follows,
        followers: user._count.followers,
        comments: user._count.comments,
        likes: user._count.likes,
        createdAt: user.createdAt
      };
      
      if (realUsers.includes(user.nickname)) {
        usersToKeep.push(userInfo);
      } else {
        usersToDelete.push(userInfo);
      }
    });
    
    console.log('‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã):');
    usersToKeep.forEach(user => {
      console.log(`   - ${user.nickname} (${user.fullName || 'No name'})`);
      console.log(`     ID: ${user.id}`);
      console.log(`     Wallet: ${user.wallet || 'Not connected'}`);
      console.log(`     –ü–æ—Å—Ç–æ–≤: ${user.posts}, –ü–æ–¥–ø–∏—Å–æ–∫: ${user.following}, –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${user.followers}`);
      console.log('');
    });
    
    console.log('\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
    usersToDelete.forEach(user => {
      console.log(`   - ${user.nickname} (${user.fullName || 'No name'})`);
      console.log(`     ID: ${user.id}`);
      console.log(`     Wallet: ${user.wallet || 'Not connected'}`);
      console.log(`     –ü–æ—Å—Ç–æ–≤: ${user.posts}, –ü–æ–¥–ø–∏—Å–æ–∫: ${user.following}, –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${user.followers}`);
      console.log('');
    });
    
    if (usersToDelete.length > 0) {
      console.log('\nüóëÔ∏è  –•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? (yes/no)');
      
      // –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      if (process.argv[2] === '--auto-yes') {
        console.log('   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...');
        
        for (const user of usersToDelete) {
          console.log(`\n   –£–¥–∞–ª—è—é ${user.nickname}...`);
          
          // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ schema)
          await prisma.user.delete({
            where: { id: user.id }
          });
          
          console.log(`   ‚úÖ ${user.nickname} —É–¥–∞–ª–µ–Ω`);
        }
        
        console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      } else {
        console.log('   –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/check-and-clean-users.js --auto-yes');
      }
    } else {
      console.log('\n‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkAndCleanUsers(); 