const fetch = require('node-fetch')
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function testDynamicPricing() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫—É—Ä—Å–∞...\n')
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoint
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint /api/pricing:')
    const apiUrl = 'http://localhost:3000/api/pricing'
      
    const response = await fetch(apiUrl)
    const data = await response.json()
    
    console.log('Response status:', response.status)
    console.log('Response data:', JSON.stringify(data, null, 2))
    
    if (data.success) {
      console.log('‚úÖ API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
      console.log(`   –ö—É—Ä—Å SOL/USD: $${data.rate}`)
      console.log(`   –ò—Å—Ç–æ—á–Ω–∏–∫: ${data.data?.prices?.source || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`)
    } else {
      console.log('‚ùå API endpoint –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É')
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏:')
    const usersWithWallets = await prisma.user.findMany({
      where: {
        AND: [
          {
            OR: [
              { wallet: { not: null } },
              { solanaWallet: { not: null } }
            ]
          },
          {
            nickname: { not: null }
          }
        ]
      },
      select: {
        id: true,
        nickname: true,
        wallet: true,
        solanaWallet: true,
        referrerId: true
      },
      take: 10
    })
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${usersWithWallets.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏ –∏ –Ω–∏–∫–Ω–µ–π–º–∞–º–∏:`)
    usersWithWallets.forEach(user => {
      const wallet = user.solanaWallet || user.wallet
      console.log(`   - @${user.nickname}: ${wallet ? wallet.slice(0, 8) + '...' : '–Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞'}`)
    })
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–µ–ª–∞–µ–º 3 –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ä—è–¥)
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (3 –∑–∞–ø—Ä–æ—Å–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 —Å–µ–∫):')
    for (let i = 0; i < 3; i++) {
      const start = Date.now()
      const res = await fetch(apiUrl)
      const time = Date.now() - start
      const json = await res.json()
      
      console.log(`   –ó–∞–ø—Ä–æ—Å ${i + 1}: ${time}ms, –∫—É—Ä—Å: $${json.rate}, –∏—Å—Ç–æ—á–Ω–∏–∫: ${json.data?.prices?.source}`)
      
      if (i < 2) await new Promise(resolve => setTimeout(resolve, 1000))
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testDynamicPricing()

// Instructions
console.log('\nUsage:')
console.log('  Local:      node scripts/test-dynamic-pricing.js')
console.log('  Production: node scripts/test-dynamic-pricing.js https://fonana.me')
console.log('  Custom:     node scripts/test-dynamic-pricing.js http://your-server:port') 