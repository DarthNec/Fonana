const {
  Connection,
  PublicKey,
  Transaction,
  SystemProgram,
  LAMPORTS_PER_SOL,
  sendAndConfirmRawTransaction
} = require('@solana/web3.js');

const QUICKNODE_RPC = 'https://tame-smart-panorama.solana-mainnet.quiknode.pro/0e70fc875702b126bf8b93cdcd626680e9c48894/';
const PLATFORM_WALLET = 'npzAZaN9fDMgLV63b3kv3FF8cLSd8dQSLxyMXASA5T4';

async function testRealTransaction() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...\n');
  
  try {
    const connection = new Connection(QUICKNODE_RPC, {
      commitment: 'confirmed',
      confirmTransactionInitialTimeout: 60000,
      wsEndpoint: 'wss://tame-smart-panorama.solana-mainnet.quiknode.pro/0e70fc875702b126bf8b93cdcd626680e9c48894/'
    });
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å RPC...');
    const version = await connection.getVersion();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Solana:', version['solana-core']);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ—Ç
    const currentSlot = await connection.getSlot();
    console.log(`‚úÖ –¢–µ–∫—É—â–∏–π —Å–ª–æ—Ç: ${currentSlot}`);
    
    // 3. –ü–æ–ª—É—á–∞–µ–º blockhash
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ blockhash...');
    const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash('confirmed');
    console.log('‚úÖ Blockhash:', blockhash);
    console.log('‚úÖ Last valid block height:', lastValidBlockHeight);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤...');
    const platformPubkey = new PublicKey(PLATFORM_WALLET);
    const balance = await connection.getBalance(platformPubkey);
    console.log('üí∞ –ë–∞–ª–∞–Ω—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', balance / LAMPORTS_PER_SOL, 'SOL');
    
    // 5. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    console.log('\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    const transaction = new Transaction();
    transaction.recentBlockhash = blockhash;
    transaction.lastValidBlockHeight = lastValidBlockHeight;
    transaction.feePayer = platformPubkey;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–ø–µ—Ä–µ–≤–æ–¥ 0.001 SOL —Å–∞–º–æ–º—É —Å–µ–±–µ –¥–ª—è —Ç–µ—Å—Ç–∞)
    transaction.add(
      SystemProgram.transfer({
        fromPubkey: platformPubkey,
        toPubkey: platformPubkey,
        lamports: 0.001 * LAMPORTS_PER_SOL
      })
    );
    
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:');
    console.log('   - Blockhash:', transaction.recentBlockhash);
    console.log('   - Last valid height:', transaction.lastValidBlockHeight);
    console.log('   - Fee payer:', transaction.feePayer.toBase58());
    console.log('   - Instructions:', transaction.instructions.length);
    
    // 6. –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    console.log('\n5Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    try {
      const simulation = await connection.simulateTransaction(transaction);
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º—É–ª—è—Ü–∏–∏:');
      console.log('   - –û—à–∏–±–∫–∞:', simulation.value.err ? JSON.stringify(simulation.value.err) : '–ù–µ—Ç');
      console.log('   - –õ–æ–≥–∏:', simulation.value.logs?.slice(0, 5).join('\n     '));
      console.log('   - Units consumed:', simulation.value.unitsConsumed);
      
      if (simulation.value.err) {
        console.error('‚ùå –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∫–∞–∑–∞–ª–∞ –æ—à–∏–±–∫—É:', simulation.value.err);
        return;
      }
    } catch (simError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏:', simError);
    }
    
    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    console.log('\n6Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏:');
    console.log('   - commitment: "confirmed"');
    console.log('   - preflightCommitment: "confirmed"');
    console.log('   - skipPreflight: false');
    console.log('   - maxRetries: 3');
    
    // 8. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏
    console.log('\n7Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π...');
    try {
      const fees = await connection.getRecentPrioritizationFees();
      if (fees && fees.length > 0) {
        const avgFee = fees.reduce((sum, f) => sum + f.prioritizationFee, 0) / fees.length;
        console.log('üí∏ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏:');
        console.log(`   - –°—Ä–µ–¥–Ω—è—è: ${avgFee} microlamports`);
        console.log(`   - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: ${Math.min(...fees.map(f => f.prioritizationFee))}`);
        console.log(`   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: ${Math.max(...fees.map(f => f.prioritizationFee))}`);
      }
    } catch (feeError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π:', feeError);
    }
    
    // 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è rent
    console.log('\n8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');
    const minBalance = await connection.getMinimumBalanceForRentExemption(0);
    console.log('üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è rent exemption:', minBalance / LAMPORTS_PER_SOL, 'SOL');
    
    console.log('\n‚ú® –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('\nüìù –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏:');
    console.log('1. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è (–¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é)');
    console.log('2. –ü—Ä–æ–±–ª–µ–º—ã —Å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º');
    console.log('3. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–µ—Ç—å (–ø—Ä–æ–±–ª–µ–º–∞ —Å wallet adapter)');
    console.log('4. –ò—Å—Ç–µ–∫—à–∏–π blockhash (–Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è)');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.stack) {
      console.error('\n–°—Ç–µ–∫:', error.stack);
    }
  }
}

testRealTransaction(); 