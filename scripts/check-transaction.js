#!/usr/bin/env node

const { Connection } = require('@solana/web3.js')

async function checkTransaction(signature) {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', signature)
  console.log('=' * 60)
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º QuickNode RPC
  const connection = new Connection(
    'https://tame-smart-panorama.solana-mainnet.quiknode.pro/0e70fc875702b126bf8b93cdcd626680e9c48894/',
    'confirmed'
  )
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∏
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∏...')
    const status = await connection.getSignatureStatus(signature)
    console.log('–°—Ç–∞—Ç—É—Å:', JSON.stringify(status, null, 2))
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...')
    const tx = await connection.getTransaction(signature, {
      maxSupportedTransactionVersion: 0
    })
    
    if (!tx) {
      console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ!')
      return
    }
    
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞!')
    console.log('–°–ª–æ—Ç:', tx.slot)
    console.log('–í—Ä–µ–º—è –±–ª–æ–∫–∞:', tx.blockTime ? new Date(tx.blockTime * 1000).toISOString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    console.log('–°—Ç–∞—Ç—É—Å:', tx.meta?.err ? `–û—à–∏–±–∫–∞: ${JSON.stringify(tx.meta.err)}` : '–£—Å–ø–µ—à–Ω–æ')
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–æ –∏ –ø–æ—Å–ª–µ
    if (tx.meta) {
      console.log('\n3. –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:')
      const accountKeys = tx.transaction.message.getAccountKeys()
      
      for (let i = 0; i < accountKeys.staticAccountKeys.length; i++) {
        const preBalance = tx.meta.preBalances[i] / 1e9 // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ SOL
        const postBalance = tx.meta.postBalances[i] / 1e9
        const diff = postBalance - preBalance
        
        if (diff !== 0) {
          console.log(`${accountKeys.staticAccountKeys[i].toBase58()}: ${diff > 0 ? '+' : ''}${diff.toFixed(4)} SOL`)
        }
      }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
    if (tx.meta?.logMessages && tx.meta.logMessages.length > 0) {
      console.log('\n4. –õ–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:')
      tx.meta.logMessages.forEach(log => console.log(' ', log))
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error.message)
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
const signature = process.argv[2]
if (!signature) {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node check-transaction.js <TRANSACTION_SIGNATURE>')
  process.exit(1)
}

checkTransaction(signature) 