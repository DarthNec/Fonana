#!/usr/bin/env node

const WebSocket = require('ws');
const fetch = require('node-fetch');

console.log('üîç Local WebSocket JWT Test\n');

// –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫
const testWallet = 'DUxkXhMWuo76ofUMtFRZtL8zmVqQnb8twLeB5NcaM4cG';

async function testWebSocket() {
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ localhost
    console.log('üîë Getting JWT token...');
    const tokenResponse = await fetch('http://localhost:3000/api/auth/wallet', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ wallet: testWallet })
    });
    
    if (!tokenResponse.ok) {
      const error = await tokenResponse.text();
      throw new Error(`API error: ${tokenResponse.status} - ${error}`);
    }
    
    const { token, user } = await tokenResponse.json();
    console.log('‚úÖ JWT token received');
    console.log(`   User: ${user.nickname || user.id}`);
    console.log(`   Token: ${token.substring(0, 50)}...`);
    
    // 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å —Ç–æ–∫–µ–Ω–æ–º
    console.log('\nüîå Connecting to WebSocket...');
    const ws = new WebSocket('ws://localhost:3002', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    ws.on('open', () => {
      console.log('‚úÖ WebSocket connected successfully!');
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const subscribeMsg = JSON.stringify({
        type: 'subscribe',
        channel: `user:${user.id}`
      });
      ws.send(subscribeMsg);
      console.log('üì§ Subscribed to user channel');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      setTimeout(() => {
        const testMsg = JSON.stringify({
          type: 'ping',
          timestamp: new Date().toISOString()
        });
        ws.send(testMsg);
        console.log('üì§ Sent test ping');
      }, 1000);
    });
    
    ws.on('message', (data) => {
      console.log('üì• Received:', data.toString());
    });
    
    ws.on('error', (error) => {
      console.error('‚ùå WebSocket error:', error.message);
    });
    
    ws.on('close', (code, reason) => {
      console.log(`üîå WebSocket closed: ${code} - ${reason}`);
      if (code === 1008) {
        console.log('‚ùå Authentication failed - JWT token rejected');
      }
    });
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      console.log('\nüèÅ Test completed, closing connection...');
      ws.close();
      process.exit(0);
    }, 5000);
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testWebSocket(); 