#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase –≤ –ª–æ–∫–∞–ª—å–Ω—É—é PostgreSQL
"""

import psycopg2
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
LOCAL_DB = {
    'host': 'localhost',
    'database': 'fonana',
    'user': 'fonana_user', 
    'password': 'fonana_pass',
    'port': 5432
}

def escape_sql_string(value):
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è SQL"""
    if value is None:
        return "null"
    
    # –ó–∞–º–µ–Ω—è–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    value = str(value).replace("'", "''")
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏
    value = value.replace("\\", "\\\\")
    return f"'{value}'"

def format_sql_value(value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è SQL"""
    if value is None:
        return "null"
    elif isinstance(value, bool):
        return "true" if value else "false"
    elif isinstance(value, (int, float)):
        return str(value)
    else:
        return escape_sql_string(value)

def import_posts_batch(conn, posts, start_idx=0):
    """–ò–º–ø–æ—Ä—Ç –ø–∞—Ä—Ç–∏–∏ –ø–æ—Å—Ç–æ–≤"""
    cursor = conn.cursor()
    
    for idx, post in enumerate(posts):
        try:
            sql = f"""
INSERT INTO posts (id, "creatorId", title, content, type, category, thumbnail, "mediaUrl", 
                  "isLocked", "isPremium", price, currency, "likesCount", "commentsCount", 
                  "viewsCount", "createdAt", "updatedAt") 
VALUES ({format_sql_value(post['id'])}, {format_sql_value(post['creatorId'])}, 
        {format_sql_value(post['title'])}, {format_sql_value(post['content'])}, 
        {format_sql_value(post['type'])}, {format_sql_value(post['category'])}, 
        {format_sql_value(post['thumbnail'])}, {format_sql_value(post['mediaUrl'])}, 
        {post['isLocked']}, {post['isPremium']}, {post['price']}, 
        {format_sql_value(post['currency'])}, {post['likesCount']}, {post['commentsCount']}, 
        {post['viewsCount']}, {format_sql_value(post['createdAt'])}, 
        {format_sql_value(post['updatedAt'])})
ON CONFLICT (id) DO UPDATE SET
    title = EXCLUDED.title,
    content = EXCLUDED.content,
    "likesCount" = EXCLUDED."likesCount",
    "commentsCount" = EXCLUDED."commentsCount",
    "viewsCount" = EXCLUDED."viewsCount";
"""
            cursor.execute(sql)
            print(f"‚úì –ü–æ—Å—Ç {start_idx + idx + 1}: {post['title'][:50]}...")
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å –ø–æ—Å—Ç–æ–º {post['id']}: {str(e)}")
            conn.rollback()
            continue
    
    conn.commit()
    cursor.close()

def import_all_data(all_posts_data, all_comments_data, all_likes_data, all_notifications_data, all_tags_data):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞"""
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        conn = psycopg2.connect(**LOCAL_DB)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π PostgreSQL")
        
        # 1. –ò–º–ø–æ—Ä—Ç –ø–æ—Å—Ç–æ–≤
        print(f"\nüìù –ò–º–ø–æ—Ä—Ç {len(all_posts_data)} –ø–æ—Å—Ç–æ–≤...")
        import_posts_batch(conn, all_posts_data)
        
        # 2. –ò–º–ø–æ—Ä—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤  
        if all_comments_data:
            print(f"\nüí¨ –ò–º–ø–æ—Ä—Ç {len(all_comments_data)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
            cursor = conn.cursor()
            for comment in all_comments_data:
                try:
                    sql = f"""
INSERT INTO comments (id, "postId", "userId", content, "createdAt", "updatedAt")
VALUES ({format_sql_value(comment['id'])}, {format_sql_value(comment['postId'])}, 
        {format_sql_value(comment['userId'])}, {format_sql_value(comment['content'])},
        {format_sql_value(comment['createdAt'])}, {format_sql_value(comment['updatedAt'])})
ON CONFLICT (id) DO UPDATE SET content = EXCLUDED.content;
"""
                    cursor.execute(sql)
                except Exception as e:
                    print(f"‚úó –û—à–∏–±–∫–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º {comment['id']}: {str(e)}")
                    conn.rollback()
            conn.commit()
            cursor.close()
        
        # 3. –ò–º–ø–æ—Ä—Ç –ª–∞–π–∫–æ–≤
        if all_likes_data:
            print(f"\n‚ù§Ô∏è –ò–º–ø–æ—Ä—Ç {len(all_likes_data)} –ª–∞–π–∫–æ–≤...")
            cursor = conn.cursor()
            for like in all_likes_data:
                try:
                    sql = f"""
INSERT INTO likes (id, "postId", "userId", "createdAt")
VALUES ({format_sql_value(like['id'])}, {format_sql_value(like['postId'])}, 
        {format_sql_value(like['userId'])}, {format_sql_value(like['createdAt'])})
ON CONFLICT (id) DO NOTHING;
"""
                    cursor.execute(sql)
                except Exception as e:
                    print(f"‚úó –û—à–∏–±–∫–∞ —Å –ª–∞–π–∫–æ–º {like['id']}: {str(e)}")
                    conn.rollback()
            conn.commit()
            cursor.close()
        
        # 4. –ò–º–ø–æ—Ä—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if all_notifications_data:
            print(f"\nüì¢ –ò–º–ø–æ—Ä—Ç {len(all_notifications_data)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            cursor = conn.cursor()
            for notif in all_notifications_data:
                try:
                    sql = f"""
INSERT INTO notifications (id, "userId", type, message, "isRead", "createdAt", "relatedId")
VALUES ({format_sql_value(notif['id'])}, {format_sql_value(notif['userId'])}, 
        {format_sql_value(notif['type'])}, {format_sql_value(notif['message'])},
        {notif.get('isRead', False)}, {format_sql_value(notif['createdAt'])},
        {format_sql_value(notif.get('relatedId'))})
ON CONFLICT (id) DO UPDATE SET "isRead" = EXCLUDED."isRead";
"""
                    cursor.execute(sql)
                except Exception as e:
                    print(f"‚úó –û—à–∏–±–∫–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º {notif['id']}: {str(e)}")
                    conn.rollback()
            conn.commit()
            cursor.close()
        
        # 5. –ò–º–ø–æ—Ä—Ç —Ç–µ–≥–æ–≤
        if all_tags_data:
            print(f"\nüè∑Ô∏è –ò–º–ø–æ—Ä—Ç {len(all_tags_data)} —Ç–µ–≥–æ–≤...")
            cursor = conn.cursor()
            for tag in all_tags_data:
                try:
                    sql = f"""
INSERT INTO tags (id, name, "usageCount", "createdAt")
VALUES ({format_sql_value(tag['id'])}, {format_sql_value(tag['name'])}, 
        {tag.get('usageCount', 0)}, {format_sql_value(tag['createdAt'])})
ON CONFLICT (id) DO UPDATE SET "usageCount" = EXCLUDED."usageCount";
"""
                    cursor.execute(sql)
                except Exception as e:
                    print(f"‚úó –û—à–∏–±–∫–∞ —Å —Ç–µ–≥–æ–º {tag['id']}: {str(e)}")
                    conn.rollback()
            conn.commit()
            cursor.close()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM posts")
        posts_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM comments")
        comments_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM likes")
        likes_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM notifications")
        notifs_count = cursor.fetchone()[0]
        cursor.close()
        
        print(f"\n‚úÖ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î:")
        print(f"   - –ü–æ—Å—Ç—ã: {posts_count}")
        print(f"   - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {comments_count}")
        print(f"   - –õ–∞–π–∫–∏: {likes_count}")
        print(f"   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifs_count}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase...")
    print("‚ö†Ô∏è  –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ MCP Supabase")
    print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏–º–ø–æ—Ä—Ç–∞") 